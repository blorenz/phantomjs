./phantom.cpp:        //printf("[DEBUG]PATH : %s\n", ptmjs_path);
./phantom.cpp:        //printf("testing_path = %s\n", moduleSourceFilePath.toAscii().data());
./webserver.cpp:    mg_printf(m_conn, "HTTP/1.1 %d %s\r\n", m_statusCode, responseCodeString(m_statusCode));
./webserver.cpp:        mg_printf(m_conn, "%s: %s\r\n", qPrintable(it.key()), qPrintable(it.value().toString()));
./qt/src/tools/uic/uic.cpp:            fprintf(stdout, "%s\n", file.toLocal8Bit().constData());
./qt/src/tools/uic/uic.cpp:                fprintf(stdout, "%s\n", file.toLocal8Bit().constData());
./qt/src/tools/uic/uic.cpp:                    fprintf(stderr, "%s\n", qPrintable(msg));
./qt/src/tools/uic/uic.cpp:        fprintf(stderr, "%s\n", qPrintable(QString::fromLatin1("uic: Error in line %1, column %2 : %3")
./qt/src/tools/uic/uic.cpp:        fprintf(stderr, "uic: File generated with too old version of Qt Designer\n");
./qt/src/tools/uic/uic.cpp:            fprintf(stderr, "uic: File is not a 'jambi' form\n");
./qt/src/tools/uic/uic.cpp:        fprintf(stderr, "uic: option to generate java code not compiled in\n");
./qt/src/tools/uic/uic.cpp:            fprintf(stderr, "uic: File is not a 'c++' ui file, language=%s\n", qPrintable(language));
./qt/src/tools/uic/uic.cpp:        fprintf(stderr, "uic: option to generate cpp code not compiled in\n");
./qt/src/tools/uic/main.cpp:    fprintf(stderr, "Qt User Interface Compiler version %s\n", QT_VERSION_STR);
./qt/src/tools/uic/main.cpp:        fprintf(stderr, "%s: %s\n", appName, error);
./qt/src/tools/uic/main.cpp:    fprintf(stderr, "Usage: %s [options] <uifile>\n\n"
./qt/src/tools/uic/main.cpp:            fprintf(stderr, "Qt User Interface Compiler version %s\n", QT_VERSION_STR);
./qt/src/tools/uic/main.cpp:            fprintf(stderr, "Could not create output file\n");
./qt/src/tools/uic/main.cpp:        fprintf(stderr, "File '%s' is not valid\n", inputFile.isEmpty() ? "<stdin>" : inputFile.toLocal8Bit().constData());
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:            fprintf(stderr, "%s: Warning: Buddy assignment: '%s' is not a valid widget.\n",
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:            fprintf(stderr, "%s: Warning: Buddy assignment: '%s' is not a valid widget.\n",
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:            fprintf(stderr, "%s: Warning: Z-order assignment: '%s' is not a valid widget.\n",
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:        fprintf(stderr, "%s: Warning: Creating button group `%s'\n",
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:        fprintf(stderr, "%s: Warning: action `%s' not declared\n",
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:            fprintf(stderr, "%s: Warning: Tab-stop assignment: '%s' is not a valid widget.\n",
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:        fprintf(stderr, "%s: Warning: Invalid database connection\n", qPrintable(m_option.messagePrefix()));
./qt/src/tools/uic/cpp/cppwriteinitialization.cpp:        fprintf(stderr, "%s: Warning: Invalid database connection\n", qPrintable(m_option.messagePrefix()));
./qt/src/tools/uic/cpp/cppwriteincludes.cpp:        fprintf(stderr, "%s '%s'\n", Q_FUNC_INFO, qPrintable(node->attributeClass()));
./qt/src/tools/uic/cpp/cppwriteincludes.cpp:        fprintf(stderr, "%s %s '%s' %d\n", Q_FUNC_INFO, qPrintable(className), qPrintable(header), global);
./qt/src/tools/uic/cpp/cppwriteincludes.cpp:            fprintf(stderr, "%s %s '%s' %d\n", Q_FUNC_INFO, qPrintable(className), qPrintable(header), global);
./qt/src/tools/uic/cpp/cppwriteincludes.cpp:        fprintf(stderr, "%s %s %d\n", Q_FUNC_INFO, qPrintable(header), global);
./qt/src/tools/uic/cpp/cppextractimages.cpp:            fprintf(stderr, "%s: Error: Could not create resource file\n", qPrintable(m_option.messagePrefix()));
./qt/src/tools/uic/cpp/cppextractimages.cpp:            fprintf(stderr, "%s: Error: Could not create image dir\n", qPrintable(m_option.messagePrefix()));
./qt/src/tools/uic/cpp/cppextractimages.cpp:        fprintf(stderr, "%s: Error: Could not create image file %s: %s",
./qt/src/tools/uic/driver.cpp:        fprintf(stderr, "%s: Warning: The name '%s' (%s) is already in use, defaulting to '%s'.\n",
./qt/src/tools/uic/driver.cpp:    fprintf(stderr, "uic: option to generate cpp code not compiled in [%s:%d]\n",
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Couldn't load library file %s\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Library file %s doesn't appear to be a COM library\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Couldn't load library file %s\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Library file %s doesn't appear to be a COM library\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Couldn't load library file %s\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Couldn't resolve 'DumpIDL' symbol in %s\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stdout, "Qt Interface Definition Compiler version 1.0\n");
./qt/src/tools/idc/main.cpp:                fprintf(stderr, "Failed to register server!\n");
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Server registered successfully!\n");
./qt/src/tools/idc/main.cpp:                fprintf(stderr, "Failed to unregister server!\n");
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Server unregistered successfully!\n");
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "%s", error.toLatin1().data());
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "\n");
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "No input file specified!\n");
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "No type output file specified!\n");
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "No interface definition file and no type library file specified!\n");
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Couldn't open %s for read\n", (const char*)tlbfile.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "%s", error.toLatin1().data());
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "\n");
./qt/src/tools/idc/main.cpp:        fprintf(stderr, "\n\n%s\n\n", (const char*)idlfile.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "IDL generation failed trying to run program %s!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Couldn't open %s for writing!\n", (const char*)idlfile.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Malformed appID value in %s!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Malformed typeLibID value in %s!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Class has no metaobject information (error in %s)!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Malformed classID value in %s!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Malformed interfaceID value in %s!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Malformed eventsID value in %s!\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/idc/main.cpp:            fprintf(stderr, "Unknown error writing IDL from %s\n", (const char*)input.toLocal8Bit().data());
./qt/src/tools/moc/mwerks_mac.cpp:        sprintf(dmsg, "\"%s\" %s", source.data(), derr.data());
./qt/src/tools/moc/mwerks_mac.cpp:                sprintf(msg, "\"%s\" No relevant classes found. No output generated.", source.data());
./qt/src/tools/moc/mwerks_mac.cpp:                            sprintf(msg, "\"%s\" not added", dest.data());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "static const uint qt_meta_data_%s[] = {\n", qualifiedClassNameIdentifier.constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n // content:\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d,       // revision\n", 6);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d,       // classname\n", strreg(cdef->qualified));
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d, %4d, // classinfo\n", cdef->classInfoList.count(), cdef->classInfoList.count() ? index : 0);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d, %4d, // methods\n", methodCount, methodCount ? index : 0);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d, %4d, // properties\n", cdef->propertyList.count(), cdef->propertyList.count() ? index : 0);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d, %4d, // enums/sets\n", cdef->enumList.count(), cdef->enumList.count() ? index : 0);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d, %4d, // constructors\n", isConstructible ? cdef->constructorList.count() : 0,
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d,       // flags\n", 0);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    %4d,       // signalCount\n", cdef->signalList.count());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n       0        // eod\n};\n\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "static const char qt_meta_stringdata_%s[] = {\n", qualifiedClassNameIdentifier.constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    \"");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "\"\n    \"");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "\"\"");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "\"\n    \"");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\"\n};\n\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "#ifdef Q_NO_DATA_RELOCATION\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "static const QMetaObjectAccessor qt_meta_extradata_%s[] = {\n    ", qualifiedClassNameIdentifier.constData());
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    %s::getStaticMetaObject,\n", extraList.at(i).constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "#else\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "static const QMetaObject *qt_meta_extradata_%s[] = {\n    ", qualifiedClassNameIdentifier.constData());
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    &%s::staticMetaObject,\n", extraList.at(i).constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "#endif //Q_NO_DATA_RELOCATION\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    0\n};\n\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "const QMetaObjectExtraData %s::staticMetaObjectExtraData = {\n    ",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "0, ");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "qt_meta_extradata_%s, ", qualifiedClassNameIdentifier.constData());
./qt/src/tools/moc/generator.cpp:            fprintf(out, " qt_static_metacall");
./qt/src/tools/moc/generator.cpp:            fprintf(out, " 0");
./qt/src/tools/moc/generator.cpp:        fprintf(out, " \n};\n\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "const QMetaObject QObject::staticQtMetaObject = {\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "const QMetaObject %s::staticMetaObject = {\n", cdef->qualified.constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    { 0, ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    { &%s::staticMetaObject, ", purestSuperClass.constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    { 0, ");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "qt_meta_stringdata_%s,\n      qt_meta_data_%s, ",
./qt/src/tools/moc/generator.cpp:        fprintf(out, "0 }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "&staticMetaObjectExtraData }\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "};\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n#ifdef Q_NO_DATA_RELOCATION\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "const QMetaObject &%s::getStaticMetaObject() { return staticMetaObject; }\n", cdef->qualified.constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "#endif //Q_NO_DATA_RELOCATION\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\nconst QMetaObject *%s::metaObject() const\n{\n    return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;\n}\n",
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\nvoid *%s::qt_metacast(const char *_clname)\n{\n", cdef->qualified.constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    if (!_clname) return 0;\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    if (!strcmp(_clname, qt_meta_stringdata_%s))\n"
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    if (!strcmp(_clname, \"%s\"))\n        return static_cast< %s*>(const_cast< %s*>(this));\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    if (!strcmp(_clname, %s))\n        return ", iface.at(j).interfaceId.constData());
./qt/src/tools/moc/generator.cpp:                fprintf(out, "static_cast< %s*>(", iface.at(k).className.constData());
./qt/src/tools/moc/generator.cpp:            fprintf(out, "const_cast< %s*>(this)%s;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    typedef %s QMocSuperClass;\n", superClass.constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    return %s::qt_metacast(_clname);\n", superClass.constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    return 0;\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "}\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n // classinfo: key, value\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    %4d, %4d,\n", strreg(c.name), strreg(c.value));
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n // %ss: signature, parameters, type, tag, flags\n", functype);
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    %4d, %4d, %4d, %4d, 0x%02x,\n", strreg(sig),
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n // %ss: revision\n", functype);
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    %4d,\n", f.revision);
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n // properties: name, type, flags\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    %4d, %4d, ",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "((uint)QMetaType::QReal << 24) | ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "0x%.8x,\n", flags);
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n // properties: notify_signal_id\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "    %4d,\n",
./qt/src/tools/moc/generator.cpp:                fprintf(out, "    %4d,\n",
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n // properties: revision\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    %4d,\n", p.revision);
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n // enums: name, flags, count, data\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    %4d, 0x%.1x, %4d, %4d,\n",
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n // enum data: key, value\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    %4d, uint(%s::%s),\n",
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\nint %s::qt_metacall(QMetaObject::Call _c, int _id, void **_a)\n{\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    typedef %s QMocSuperClass;\n", superClass.constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    _id = %s::qt_metacall(_c, _id, _a);\n", superClass.constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    if (_id < 0)\n        return _id;\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::InvokeMetaMethod) {\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        if (_id < %d)\n", methodList.size());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "            qt_static_metacall(this, _c, _id, _a);\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        _id -= %d;\n    }", methodList.size());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n#ifndef QT_NO_PROPERTIES\n     ");
./qt/src/tools/moc/generator.cpp:            fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::ReadProperty) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        void *_v = _a[0];\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                    fprintf(out, "        case %d: _a[0] = const_cast<void*>(reinterpret_cast<const void*>(%s%s())); break;\n",
./qt/src/tools/moc/generator.cpp:                    fprintf(out, "        case %d: _a[0] = const_cast<void*>(reinterpret_cast<const void*>(&%s%s())); break;\n",
./qt/src/tools/moc/generator.cpp:                    fprintf(out, "        case %d: *reinterpret_cast<int*>(_v) = QFlag(%s%s()); break;\n",
./qt/src/tools/moc/generator.cpp:                    fprintf(out, "        case %d: *reinterpret_cast< %s*>(_v) = %s%s(); break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::WriteProperty) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        void *_v = _a[0];\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                    fprintf(out, "        case %d: %s%s(QFlag(*reinterpret_cast<int*>(_v))); break;\n",
./qt/src/tools/moc/generator.cpp:                    fprintf(out, "        case %d: %s%s(*reinterpret_cast< %s*>(_v)); break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::ResetProperty) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        case %d: %s%s; break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::QueryPropertyDesignable) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        bool *_b = reinterpret_cast<bool*>(_a[0]);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        case %d: *_b = %s; break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::QueryPropertyScriptable) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        bool *_b = reinterpret_cast<bool*>(_a[0]);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        case %d: *_b = %s; break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::QueryPropertyStored) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        bool *_b = reinterpret_cast<bool*>(_a[0]);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        case %d: *_b = %s; break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::QueryPropertyEditable) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        bool *_b = reinterpret_cast<bool*>(_a[0]);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        case %d: *_b = %s; break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::QueryPropertyUser) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        bool *_b = reinterpret_cast<bool*>(_a[0]);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "        case %d: *_b = %s; break;\n",
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out,
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n#endif // QT_NO_PROPERTIES");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n    ");
./qt/src/tools/moc/generator.cpp:    fprintf(out,"return _id;\n}\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "void %s::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)\n{\n",
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    if (_c == QMetaObject::CreateInstance) {\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        case %d: { %s *_r = new %s(", ctorindex,
./qt/src/tools/moc/generator.cpp:                    fprintf(out, ",");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "(*reinterpret_cast< %s>(_a[%d]))", a.typeNameForCast.constData(), offset++);
./qt/src/tools/moc/generator.cpp:            fprintf(out, ");\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    }");
./qt/src/tools/moc/generator.cpp:            fprintf(out, " else ");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "if (_c == QMetaObject::InvokeMetaMethod) {\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        Q_ASSERT(staticMetaObject.cast(_o));\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        %s *_t = static_cast<%s *>(_o);\n", cdef->classname.constData(), cdef->classname.constData());
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        switch (_id) {\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "        case %d: ", methodindex);
./qt/src/tools/moc/generator.cpp:                fprintf(out, "{ %s _r = ", noRef(f.normalizedType).constData());
./qt/src/tools/moc/generator.cpp:            fprintf(out, "_t->");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "%s->", f.inPrivateClass.constData());
./qt/src/tools/moc/generator.cpp:            fprintf(out, "%s(", f.name.constData());
./qt/src/tools/moc/generator.cpp:                    fprintf(out, ",");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "(*reinterpret_cast< %s>(_a[%d]))",a.typeNameForCast.constData(), offset++);
./qt/src/tools/moc/generator.cpp:            fprintf(out, ");");
./qt/src/tools/moc/generator.cpp:                fprintf(out, "\n            if (_a[0]) *reinterpret_cast< %s*>(_a[0]) = _r; } ",
./qt/src/tools/moc/generator.cpp:            fprintf(out, " break;\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        default: ;\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "        }\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    }");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    Q_UNUSED(_o);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    Q_UNUSED(_id);\n");
./qt/src/tools/moc/generator.cpp:            fprintf(out, "    Q_UNUSED(_c);\n");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    Q_UNUSED(_a);\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "}\n\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "\n// SIGNAL %d\n%s %s::%s(",
./qt/src/tools/moc/generator.cpp:        fprintf(out, ")%s\n{\n"
./qt/src/tools/moc/generator.cpp:            fprintf(out, ", ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "%s _t%d%s", a.type.name.constData(), offset++, a.rightType.constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, ")%s\n{\n", constQualifier);
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    %s _t0;\n", noRef(def->normalizedType).constData());
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    void *_a[] = { ");
./qt/src/tools/moc/generator.cpp:        fprintf(out, "0");
./qt/src/tools/moc/generator.cpp:             fprintf(out, "const_cast<void*>(reinterpret_cast<const volatile void*>(&_t0))");
./qt/src/tools/moc/generator.cpp:             fprintf(out, "const_cast<void*>(reinterpret_cast<const void*>(&_t0))");
./qt/src/tools/moc/generator.cpp:            fprintf(out, ", const_cast<void*>(reinterpret_cast<const volatile void*>(&_t%d))", i);
./qt/src/tools/moc/generator.cpp:            fprintf(out, ", const_cast<void*>(reinterpret_cast<const void*>(&_t%d))", i);
./qt/src/tools/moc/generator.cpp:    fprintf(out, " };\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "    QMetaObject::activate(%s, &staticMetaObject, %d, _a);\n", thisPtr.constData(), index);
./qt/src/tools/moc/generator.cpp:        fprintf(out, "    return _t0;\n");
./qt/src/tools/moc/generator.cpp:    fprintf(out, "}\n");
./qt/src/tools/moc/generator.cpp:// that instead of calling fprintf(), we append bytes
./qt/src/tools/moc/moc.cpp:    fprintf(out, "/****************************************************************************\n"
./qt/src/tools/moc/moc.cpp:    fprintf(out, "** Created: %s\n"
./qt/src/tools/moc/moc.cpp:    fprintf(out, "** WARNING! All changes made in this file will be lost!\n"
./qt/src/tools/moc/moc.cpp:            fprintf(out, "#include %s\n", inc.constData());
./qt/src/tools/moc/moc.cpp:        fprintf(out, "#include <QtCore/qobject.h>\n");
./qt/src/tools/moc/moc.cpp:        fprintf(out, "#include <QtCore/qmetatype.h>\n");
./qt/src/tools/moc/moc.cpp:    fprintf(out, "#if !defined(Q_MOC_OUTPUT_REVISION)\n"
./qt/src/tools/moc/moc.cpp:    fprintf(out, "#elif Q_MOC_OUTPUT_REVISION != %d\n", mocOutputRevision);
./qt/src/tools/moc/moc.cpp:    fprintf(out, "#error \"This file was generated using the moc from %s."
./qt/src/tools/moc/moc.cpp:    fprintf(out, "#endif\n\n");
./qt/src/tools/moc/moc.cpp:    fprintf(out, "QT_BEGIN_MOC_NAMESPACE\n");
./qt/src/tools/moc/moc.cpp:    fprintf(out, "QT_END_MOC_NAMESPACE\n");
./qt/src/tools/moc/util/generate_keywords.cpp:    printf("static const short %skeyword_trans[][128] = {\n",
./qt/src/tools/moc/util/generate_keywords.cpp:        printf("%s    {", i?",\n":"");
./qt/src/tools/moc/util/generate_keywords.cpp:            printf("%s%s%d",
./qt/src/tools/moc/util/generate_keywords.cpp:        printf("}");
./qt/src/tools/moc/util/generate_keywords.cpp:    printf("\n};\n\n");
./qt/src/tools/moc/util/generate_keywords.cpp:    printf("static const struct\n{\n"
./qt/src/tools/moc/util/generate_keywords.cpp:        printf("%s    {%s, %d, %d, %d, %s}",
./qt/src/tools/moc/util/generate_keywords.cpp:    printf("\n};\n");
./qt/src/tools/moc/util/generate_keywords.cpp:    printf("// auto generated\n"
./qt/src/tools/moc/main.cpp:        fprintf(stderr, "moc: %s\n", msg);
./qt/src/tools/moc/main.cpp:    fprintf(stderr, "Usage: moc [options] <header-file>\n"
./qt/src/tools/moc/main.cpp:            fprintf(stderr, "Qt Meta Object Compiler version %d (Qt %s)\n",
./qt/src/tools/moc/main.cpp:            fprintf(stderr, "moc: %s: No such file\n", (const char*)filename);
./qt/src/tools/moc/main.cpp:            fprintf(stderr, "moc: Cannot create %s\n", (const char*)output);
./qt/src/tools/moc/main.cpp:        fprintf(out, "%s\n", composePreprocessorOutput(moc.symbols).constData());
./qt/src/tools/moc/preprocessor.cpp:        fprintf(stderr, "line %d: %s(%s)\n",
./qt/src/tools/moc/preprocessor.cpp:        fprintf(stderr, "line %d: %s(%s)\n",
./qt/src/tools/moc/parser.cpp:        fprintf(stderr, ErrorFormatString "Warning: %s\n",
./qt/src/tools/moc/parser.cpp:        fprintf(stderr, ErrorFormatString "Note: %s\n",
./qt/src/tools/rcc/main.cpp:    fprintf(stderr, "Qt resource compiler\n");
./qt/src/tools/rcc/main.cpp:        fprintf(stderr, "%s: %s\n", qPrintable(argv0), qPrintable(error));
./qt/src/tools/rcc/main.cpp:    fprintf(stderr, "Usage: %s  [options] <inputs>\n\n"
./qt/src/tools/rcc/main.cpp:        fprintf(stderr, "Unable to open %s: %s\n",
./qt/src/tools/rcc/main.cpp:                fprintf(stderr, "Qt Resource Compiler version %s\n", QT_VERSION_STR);
./qt/src/xml/dom/qdom.cpp:    int count = qsnprintf(buf, sizeof(buf), "%.16g", value);
./qt/src/network/socket/qsymbiansocketengine.cpp:            tmp.sprintf("\\%o", c);
./qt/src/network/socket/qnativesocketengine_unix.cpp:            tmp.sprintf("\\%o", c);
./qt/src/network/socket/qabstractsocket.cpp:            tmp.sprintf("\\%o", c);
./qt/src/network/socket/qnativesocketengine_win.cpp:            tmp.sprintf("\\%o", c);
./qt/src/network/kernel/qnetworkinterface.cpp:        sprintf_s(buf, 3, "%02hX", ushort(data[i]));
./qt/src/network/kernel/qnetworkinterface.cpp:        sprintf(buf, "%02hX", ushort(data[i]));
./qt/src/network/kernel/qhostaddress.cpp:        s.sprintf("%d.%d.%d.%d", (i>>24) & 0xff, (i>>16) & 0xff,
./qt/src/network/kernel/qhostaddress.cpp:                temp.sprintf("%X", ugle[i]);
./qt/src/network/kernel/qhostaddress.cpp:                        temp.sprintf("%X", ugle[i]);
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:        val.set(g_strdup_printf("bytes=%" G_GUINT64_FORMAT "-", priv->requestedOffset));
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "  ");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:    fprintf(stderr, "[%g %g %g %g; %g %g %g %g; %g %g %g %g; %g %g %g %g]",
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:    fprintf(stderr, "(%s [%g %g %g] [%g %g %g %g] [%g %g %g] superlayer=%p\n",
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "(name %s)\n", layerName.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "(masksToBounds true)\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "(opacity %hf)\n", layerOpacity);
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "(sublayerTransform ");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, ")\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "(transform ");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, ")\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:            fprintf(stderr, "(contents (image [%d %d]))\n",
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, "(sublayers\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:        fprintf(stderr, ")\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:    fprintf(stderr, ")\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/ca/win/PlatformCALayerWin.cpp:    fprintf(stderr, "\n\n** Render tree at time %g (bounds %g, %g %gx%g) **\n\n", 
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/gpu/ConvolutionShader.cpp:    snprintf(vertexShaderSource, sizeof(vertexShaderSource), vertexShaderRaw, kernelWidth);
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/gpu/ConvolutionShader.cpp:    snprintf(fragmentShaderSource, sizeof(fragmentShaderSource), fragmentShaderRaw, kernelWidth);
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/GlyphPageTreeNode.cpp:            printf("%s\t%p %s\n", indent.data(), it->first, it->first->description().utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/GlyphPageTreeNode.cpp:            printf("%s\t* fallback\n", indent.data());
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/GlyphPageTreeNode.cpp:    printf("Page 0:\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/GlyphPageTreeNode.cpp:        printf("\nPage %d:\n", it->first);
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/GraphicsLayerQt.cpp:            pixmap.save(QString().sprintf("/tmp/%05d_A.png", recacheCount), "PNG");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/GraphicsLayerQt.cpp:                pixmap.save(QString().sprintf("/tmp/%05d_B.png", recacheCount), "PNG");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/GraphicsLayerQt.cpp:            pixmap.save(QString().sprintf("/tmp/%05d_C.png", recacheCount), "PNG");
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:        _snprintf(text, sizeof(text), "%1.2f", frameRate);
./qt/src/3rdparty/webkit/Source/WebCore/platform/graphics/GraphicsLayer.cpp:    fprintf(stderr, "%s\n", output.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/platform/DefaultLocalizationStrategy.cpp:    result.vsprintf(format.latin1().data(), arguments);
./qt/src/3rdparty/webkit/Source/WebCore/platform/KURL.cpp:    printf("%s\n", m_string.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/platform/Arena.cpp:        printf("Malloc: %d\n", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/Arena.cpp:                printf("Free: %d\n", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/KURLGoogle.cpp:    printf("%s\n", m_url.utf8String().data());
./qt/src/3rdparty/webkit/Source/WebCore/platform/audio/FFTFrame.cpp:    printf("**** \n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/audio/FFTFrame.cpp:    printf("DC = %f : nyquist = %f\n", realP[0], imagP[0]);
./qt/src/3rdparty/webkit/Source/WebCore/platform/audio/FFTFrame.cpp:        printf("[%d] (%f %f)\n", i, mag, phase);
./qt/src/3rdparty/webkit/Source/WebCore/platform/audio/FFTFrame.cpp:    printf("****\n");
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextEncodingRegistry.cpp:    fprintf(stderr, "Dumping %u entries in WebCore::textEncodingNameMap...\n", size);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextEncodingRegistry.cpp:        fprintf(stderr, "'%s' => '%s'\n", it->first, it->second);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextCodec.cpp:            snprintf(replacement, sizeof(UnencodableReplacementArray), "&#%u;", codePoint);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextCodec.cpp:            snprintf(replacement, sizeof(UnencodableReplacementArray), "%%26%%23%u%%3B", codePoint);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%d", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%u", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%ld", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%lu", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%.2f", f);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%.2f", d);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%p", p);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%I64i", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/text/TextStream.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%I64u", i);
./qt/src/3rdparty/webkit/Source/WebCore/platform/posix/FileSystemPOSIX.cpp:            if (static_cast<int>(sizeof(filePath) - 1) < snprintf(filePath, sizeof(filePath), "%s/%s", cpath.data(), name))
./qt/src/3rdparty/webkit/Source/WebCore/xml/XSLTUnicodeSort.cpp:    vasprintf(&messageWithArgs, message, args);
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:        fprintf(stderr, "%s%s\n", selected ? "==> " : "    ", element->localName().string().utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:            fprintf(stderr, "%s#text (empty)\n", selected ? "==> " : "    ");
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:            fprintf(stderr, "==> #text : \"%s\" at offset %d\n", show.utf8().data(), pos);
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:            fprintf(stderr, "           ");
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:                fprintf(stderr, " ");
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:            fprintf(stderr, "^\n");
./qt/src/3rdparty/webkit/Source/WebCore/editing/SelectionController.cpp:            fprintf(stderr, "    #text : \"%s\"\n", text.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisiblePosition.cpp:        fprintf(stderr, "Position [%s]: null\n", msg);
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisiblePosition.cpp:        fprintf(stderr, "Position [%s]: %s, ", msg, m_deepPosition.deprecatedNode()->nodeName().utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisibleSelection.cpp:    fprintf(stderr, "VisibleSelection ===============\n");
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisibleSelection.cpp:        fprintf(stderr, "pos:   %s ", m_start.anchorNode()->nodeName().utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisibleSelection.cpp:        fprintf(stderr, "start: %s ", m_start.anchorNode()->nodeName().utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisibleSelection.cpp:        fprintf(stderr, "end:   %s ", m_end.anchorNode()->nodeName().utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/editing/VisibleSelection.cpp:    fprintf(stderr, "================================\n");
./qt/src/3rdparty/webkit/Source/WebCore/generated/CSSGrammar.cpp:     fprintf (File, "%d.%d-%d.%d",			\
./qt/src/3rdparty/webkit/Source/WebCore/generated/CSSGrammar.cpp:#  define YYFPRINTF fprintf
./qt/src/3rdparty/webkit/Source/WebCore/generated/CSSGrammar.cpp:	  /* Avoid sprintf, as that infringes on the user's name space.
./qt/src/3rdparty/webkit/Source/WebCore/generated/XPathGrammar.cpp:     fprintf (File, "%d.%d-%d.%d",			\
./qt/src/3rdparty/webkit/Source/WebCore/generated/XPathGrammar.cpp:#  define YYFPRINTF fprintf
./qt/src/3rdparty/webkit/Source/WebCore/generated/XPathGrammar.cpp:	  /* Avoid sprintf, as that infringes on the user's name space.
./qt/src/3rdparty/webkit/Source/WebCore/history/HistoryItem.cpp:    fprintf(stderr, "%s+-%s (%p)\n", prefix.data(), m_urlString.utf8().data(), this);
./qt/src/3rdparty/webkit/Source/WebCore/svg/SVGUseElement.cpp:    fprintf(stderr, "\nDumping <use> instance tree:\n%s\n", text.latin1().data());
./qt/src/3rdparty/webkit/Source/WebCore/svg/SVGUseElement.cpp:    fprintf(stderr, "Dumping <use> shadow tree markup:\n%s\n", markup.latin1().data());
./qt/src/3rdparty/webkit/Source/WebCore/page/FrameTree.cpp:    // But we still use snprintf just to be extra-safe.
./qt/src/3rdparty/webkit/Source/WebCore/page/FrameTree.cpp:    snprintf(suffix, sizeof(suffix), "/<!--frame%u-->-->", childCount());
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:            printf("%s:%d: ", sourceURL.utf8().data(), lineNumber);
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:            printf("%s: ", sourceURL.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:    printf("%s %s:", sourceString, levelString);
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:    printf(" %s\n", message.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:                printf(" %s", argAsString.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:        printf("\n");
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:    printf("Stack Trace\n");
./qt/src/3rdparty/webkit/Source/WebCore/page/Console.cpp:        printf("\t%s\n", functionName.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/page/FrameView.cpp:            printf("Elapsed time before first layout: %d\n", document->elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/page/FrameView.cpp:        printf("Layout timer fired at %d\n", m_frame->document()->elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/page/FrameView.cpp:        printf("Scheduling layout for %d\n", delay);
./qt/src/3rdparty/webkit/Source/WebCore/page/FrameView.cpp:        printf("Layout timer unscheduled at %d\n", m_frame->document()->elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderCounter.cpp:        fprintf(stderr, "%c", (current == renderer) ? '*' : ' ');
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderCounter.cpp:            fprintf(stderr, "    ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderCounter.cpp:        fprintf(stderr, "%p N:%p P:%p PS:%p NS:%p C:%p\n",
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineTextBox.cpp:    printedCharacters += fprintf(stderr, "%s\t%p", boxName(), this);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineTextBox.cpp:    printedCharacters = fprintf(stderr, "\t%s %p", obj->renderName(), obj);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineTextBox.cpp:    fprintf(stderr, "(%d,%d) \"%s\"\n", start(), start() + len(), value.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderLayerCompositor.cpp:        fprintf(stderr, "Update %d: computeCompositingRequirements for the world took %fms\n",
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:    fprintf(stderr, "-> this=%p, SVGResources(renderer=%p, node=%p)\n", this, object, object->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:    fprintf(stderr, " | DOM Tree:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:    fprintf(stderr, "\n | List of resources:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> Clipper    : %p (node=%p)\n", clipper, clipper->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> Filter     : %p (node=%p)\n", filter, filter->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> Masker     : %p (node=%p)\n", masker, masker->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> MarkerStart: %p (node=%p)\n", markerStart, markerStart->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> MarkerMid  : %p (node=%p)\n", markerMid, markerMid->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> MarkerEnd  : %p (node=%p)\n", markerEnd, markerEnd->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> Fill       : %p (node=%p)\n", fill, fill->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:            fprintf(stderr, " |-> Stroke     : %p (node=%p)\n", stroke, stroke->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResources.cpp:        fprintf(stderr, " |-> xlink:href : %p (node=%p)\n", m_linkedResource, m_linkedResource->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributesBuilder.cpp:            fprintf(stderr, "\nDumping layout attributes for RenderSVGInlineText, renderer=%p, node=%p (atCharacter: %i)\n", text, text->node(), atCharacter);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributesBuilder.cpp:            fprintf(stderr, "BiDi properties: unicode-bidi=%i, block direction=%i\n", text->style()->unicodeBidi(), text->style()->direction());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:    fprintf(stderr, "Dumping all text fragments in text sub tree, %i boxes\n", boxCount);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:        fprintf(stderr, "-> Box %i: Dumping text fragments for SVGInlineTextBox, textBox=%p, textRenderer=%p\n", boxPosition, textBox, textBox->textRenderer());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:        fprintf(stderr, "        textBox properties, start=%i, len=%i, box direction=%i\n", textBox->start(), textBox->len(), textBox->direction());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:        fprintf(stderr, "   textRenderer properties, textLength=%i\n", textBox->textRenderer()->textLength());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:            fprintf(stderr, "    -> Fragment %i, x=%lf, y=%lf, width=%lf, height=%lf, characterOffset=%i, length=%i, characters='%s'\n"
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:        fprintf(stderr, "Line layout: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutEngine.cpp:        fprintf(stderr, "Path layout: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:    fprintf(stderr, "\nBefore cycle detection:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:    fprintf(stderr, "\nDetecting wheter any resources references any of following objects:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:        fprintf(stderr, "Local resources:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:            fprintf(stderr, "|> %s: object=%p (node=%p)\n", (*it)->renderName(), *it, (*it)->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:        fprintf(stderr, "Parent resources:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:            fprintf(stderr, "|> %s: object=%p (node=%p)\n", (*it)->renderName(), *it, (*it)->node());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGResourcesCycleSolver.cpp:    fprintf(stderr, "\nAfter cycle detection:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:        fprintf(stderr, "empty");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:            fprintf(stderr, "x ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:            fprintf(stderr, "%lf ", value);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "context: %p\n", m_context);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "x values: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "y values: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "dx values: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "dy values: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "rotate values: ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "character data values:\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:        fprintf(stderr, "| {length=%i, glyphName='%s', unicodeString='%s', width=%lf, height=%lf}\n",
./qt/src/3rdparty/webkit/Source/WebCore/rendering/svg/SVGTextLayoutAttributes.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/CounterNode.cpp:        fprintf(stderr, "%c", (current == node) ? '*' : ' ');
./qt/src/3rdparty/webkit/Source/WebCore/rendering/CounterNode.cpp:            fprintf(stderr, "    ");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/CounterNode.cpp:        fprintf(stderr, "%p %s: %d %d P:%p PS:%p NS:%p R:%p\n",
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderLayer.cpp:        fprintf(stderr, "%s\n", output.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineBox.cpp:        printedCharacters += fprintf(stderr, "%s", markedLabel1);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineBox.cpp:        printedCharacters += fprintf(stderr, "%s", markedLabel2);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineBox.cpp:        printedCharacters += fprintf(stderr, "*");
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineBox.cpp:    printedCharacters += fprintf(stderr, "%s\t%p", boxName(), this);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/InlineBox.cpp:    fprintf(stderr, "\t%s %p\n", renderer() ? renderer()->renderName() : "No Renderer", renderer());
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderObject.cpp:    printedCharacters += fprintf(stderr, "%s %p", renderName(), this);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderObject.cpp:        printedCharacters += fprintf(stderr, "%s", markedLabel1);
./qt/src/3rdparty/webkit/Source/WebCore/rendering/RenderObject.cpp:        printedCharacters += fprintf(stderr, "%s", markedLabel2);
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/DefaultAudioDestinationNode.cpp:    fprintf(stderr, ">>>> hardwareSampleRate = %f\n", hardwareSampleRate);
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("%p: %d: AudioNode::~AudioNode() %d %d %d\n", this, type(), m_normalRefCount, m_connectionRefCount, m_disabledRefCount);
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("%p: %d: AudioNode::ref(%d) %d %d %d\n", this, type(), refType, m_normalRefCount, m_connectionRefCount, m_disabledRefCount);
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("%p: %d: AudioNode::deref(%d) %d %d %d\n", this, type(), refType, m_normalRefCount, m_connectionRefCount, m_disabledRefCount);
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("\n\n");
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("===========================\n");
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("AudioNode: reference counts\n");
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("===========================\n");
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:        printf("%d: %d\n", i, s_nodeCount[i]);
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioNode.cpp:    printf("===========================\n\n\n");
./qt/src/3rdparty/webkit/Source/WebCore/webaudio/AudioContext.cpp:    printf("%p: AudioContext::~AudioContext()\n", this);
./qt/src/3rdparty/webkit/Source/WebCore/dom/DocumentMarkerController.cpp:    fprintf(stderr, "%d nodes have markers:\n", m_markers.size());
./qt/src/3rdparty/webkit/Source/WebCore/dom/DocumentMarkerController.cpp:        fprintf(stderr, "%p", node);
./qt/src/3rdparty/webkit/Source/WebCore/dom/DocumentMarkerController.cpp:            fprintf(stderr, " %d:[%d:%d](%d)", list->at(markerIndex).type, list->at(markerIndex).startOffset, list->at(markerIndex).endOffset, list->at(markerIndex).activeMatch);
./qt/src/3rdparty/webkit/Source/WebCore/dom/DocumentMarkerController.cpp:        fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("Number of Nodes: %d\n\n", liveNodeSet.size());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("Number of Nodes with RareData: %zu\n\n", nodesWithRareData);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("NodeType distrubution:\n");
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Element nodes: %zu\n", elementNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Attribute nodes: %zu\n", attrNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Text nodes: %zu\n", textNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of CDATASection nodes: %zu\n", cdataNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Comment nodes: %zu\n", commentNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of EntityReference nodes: %zu\n", entityReferenceNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Entity nodes: %zu\n", entityNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of ProcessingInstruction nodes: %zu\n", piNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Document nodes: %zu\n", documentNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of DocumentType nodes: %zu\n", docTypeNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of DocumentFragment nodes: %zu\n", fragmentNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Notation nodes: %zu\n", notationNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of XPathNS nodes: %zu\n", xpathNSNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of ShadowRoot nodes: %zu\n", shadowRootNodes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("Element tag name distibution:\n");
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:        printf("  Number of <%s> tags: %zu\n", it->first.utf8().data(), it->second);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("Attribute Maps:\n");
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Attributes (non-Node and Node): %zu [%zu]\n", attributes, sizeof(Attribute));
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Attributes that are mapped: %zu\n", mappedAttributes);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Attributes with a StyleDeclaration: %zu\n", mappedAttributesWithStyleDecl);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of Attributes with an Attr: %zu\n", attributesWithAttr);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:    printf("  Number of NamedNodeMaps: %zu [%zu]\n", attrMaps, sizeof(NamedNodeMap));
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:        fprintf(stderr, "%s%s\t%p \"%s\"\n", prefix, nodeName().utf8().data(), this, value.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:        fprintf(stderr, "%s%s\t%p%s\n", prefix, nodeName().utf8().data(), this, attrs.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:            fprintf(stderr, "%s", markedLabel1);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:            fprintf(stderr, "%s", markedLabel2);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Node.cpp:        fprintf(stderr, "%s", indent.utf8().data());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Position.cpp:        fprintf(stderr, "Position [%s]: null\n", msg);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Position.cpp:        fprintf(stderr, "Position [%s]: %s [%p] at %d\n", msg, deprecatedNode()->nodeName().utf8().data(), deprecatedNode(), m_offset);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Position.cpp:    fprintf(stderr, ", offset:%d\n", m_offset);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("onload fired at %d\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Parsing finished at %d\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Beginning a document.write at %d\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Ending a document.write at %d\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Received all data at %d\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Stylesheet loaded at time %d. %d stylesheets still remain.\n", elapsedTime(), m_pendingStylesheets);
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Beginning update of style selector at time %d.\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/Document.cpp:        printf("Finished update of style selector at time %d\n", elapsedTime());
./qt/src/3rdparty/webkit/Source/WebCore/dom/XMLDocumentParserLibxml2.cpp:    vsnprintf(m, sizeof(m) - 1, message, args);
./qt/src/3rdparty/webkit/Source/WebCore/dom/XMLDocumentParserLibxml2.cpp:    if (vasprintf(&m, message, args) == -1)
./qt/src/3rdparty/webkit/Source/WebCore/dom/Range.cpp:        fprintf(stderr, "start offset: %d, end offset: %d\n", range->startOffset(), range->endOffset());
./qt/src/3rdparty/webkit/Source/WebCore/html/HTMLElement.cpp:    printf("%s\n", element->innerHTML().ascii().data());
./qt/src/3rdparty/webkit/Source/WebCore/html/parser/HTMLFormattingElementList.cpp:            fprintf(stderr, "marker\n");
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %-13s %-13s %-13s %-13s %-13s %-13s\n", "", "Count", "Size", "LiveSize", "DecodedSize", "PurgeableSize", "PurgedSize");
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %-13s %-13s %-13s %-13s %-13s %-13s\n", "-------------", "-------------", "-------------", "-------------", "-------------", "-------------", "-------------");
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %13d %13d %13d %13d %13d %13d\n", "Images", s.images.count, s.images.size, s.images.liveSize, s.images.decodedSize, s.images.purgeableSize, s.images.purgedSize);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %13d %13d %13d %13d %13d %13d\n", "CSS", s.cssStyleSheets.count, s.cssStyleSheets.size, s.cssStyleSheets.liveSize, s.cssStyleSheets.decodedSize, s.cssStyleSheets.purgeableSize, s.cssStyleSheets.purgedSize);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %13d %13d %13d %13d %13d %13d\n", "XSL", s.xslStyleSheets.count, s.xslStyleSheets.size, s.xslStyleSheets.liveSize, s.xslStyleSheets.decodedSize, s.xslStyleSheets.purgeableSize, s.xslStyleSheets.purgedSize);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %13d %13d %13d %13d %13d %13d\n", "JavaScript", s.scripts.count, s.scripts.size, s.scripts.liveSize, s.scripts.decodedSize, s.scripts.purgeableSize, s.scripts.purgedSize);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %13d %13d %13d %13d %13d %13d\n", "Fonts", s.fonts.count, s.fonts.size, s.fonts.liveSize, s.fonts.decodedSize, s.fonts.purgeableSize, s.fonts.purgedSize);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("%-13s %-13s %-13s %-13s %-13s %-13s %-13s\n\n", "-------------", "-------------", "-------------", "-------------", "-------------", "-------------", "-------------");
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:    printf("LRU-SP lists in eviction order (Kilobytes decoded, Kilobytes encoded, Access count, Referenced, isPurgeable, wasPurged):\n");
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:        printf("\n\nList %d: ", i);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/MemoryCache.cpp:                printf("(%.1fK, %.1fK, %uA, %dR, %d, %d); ", current->decodedSize() / 1024.0f, (current->encodedSize() + current->overheadSize()) / 1024.0f, current->accessCount(), current->hasClients(), current->isPurgeable(), current->wasPurged());
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:    printf("PRELOADING %s\n",  resource->url().latin1().data());
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:            printf("!! UNREFERENCED PRELOAD %s\n", res->url().latin1().data());
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:            printf("HIT COMPLETE PRELOAD %s\n", res->url().latin1().data());
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:            printf("HIT LOADING PRELOAD %s\n", res->url().latin1().data());
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:        printf("SCRIPTS: %d (%d hits, hit rate %d%%)\n", scripts, scripts - scriptMisses, (scripts - scriptMisses) * 100 / scripts);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:        printf("STYLESHEETS: %d (%d hits, hit rate %d%%)\n", stylesheets, stylesheets - stylesheetMisses, (stylesheets - stylesheetMisses) * 100 / stylesheets);
./qt/src/3rdparty/webkit/Source/WebCore/loader/cache/CachedResourceLoader.cpp:        printf("IMAGES:  %d (%d hits, hit rate %d%%)\n", images, images - imageMisses, (images - imageMisses) * 100 / images);
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheResource.cpp:        printf("master ");
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheResource.cpp:        printf("manifest ");
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheResource.cpp:        printf("explicit ");
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheResource.cpp:        printf("foreign ");
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheResource.cpp:        printf("fallback ");
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheResource.cpp:    printf("\n");
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCache.cpp:        printf("%s ", it->first.ascii().data());
./qt/src/3rdparty/webkit/Source/WebCore/loader/appcache/ApplicationCacheStorage.cpp:    int unusedNumBytes = snprintf(userVersionSQL, sizeof(userVersionSQL), "PRAGMA user_version=%d", schemaVersion);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/c/c_instance.cpp:    snprintf(buf, sizeof(buf), "NPObject %p, NPClass %p", _object, _object->_class);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:    fprintf (stderr, "%s:  ", __PRETTY_FUNCTION__); \
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:    fprintf(stderr, formatAndArgs); \
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        printf ("%s\n", msgBuf);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        printf ("%f\n", (float)message->value.doubleValue);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        printf ("%d\n", message->value.intValue);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        printf ("%p\n", message->value.objectValue);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        fprintf(stderr, "Error opening %s.\n", file);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        fprintf(stderr, "Warning: File may have been too long.\n");
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:        fprintf(stderr, "You have to specify at least one filename\n");
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:                        fprintf(stderr,"Exception, line %d: %s\n",lineno,msg);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:                        fprintf(stderr,"Exception: %s\n",msg);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testbindings.cpp:                    fprintf(stderr,"Return value: %s\n",msg);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/jni/JNIUtility.cpp:        fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/bridge/jni/JNIUtility.cpp:        fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/bridge/jni/JNIUtility.cpp:                fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testqtbindings.cpp:                    fprintf(stderr,"Exception, line %d: %s\n",lineno,msg);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testqtbindings.cpp:                    fprintf(stderr,"Exception: %s\n",msg);
./qt/src/3rdparty/webkit/Source/WebCore/bridge/testqtbindings.cpp:                fprintf(stderr,"Return value: %s\n",msg);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:        printf("%s", exec->argument(i).toString(exec).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "--> %s\n", exec->argument(0).toString(exec).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:                printf("Exception: %s\n", completion.value().toString(globalObject->globalExec()).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:                printf("End: %s\n", completion.value().toString(globalObject->globalExec()).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:        printf("%s", interactivePrompt);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:            printf("Exception: %s\n", completion.value().toString(globalObject->globalExec()).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:            printf("%s\n", completion.value().toString(globalObject->globalExec()).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "Usage: jsc [options] [files] [-- arguments]\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "  -d         Dumps bytecode (debug builds only)\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "  -e         Evaluate argument as script code\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "  -f         Specifies a source file (deprecated)\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "  -h|--help  Prints this help message\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "  -i         Enables interactive mode (default if no files are specified)\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:    fprintf(stderr, "  -s         Installs signal handlers that exit on a crash (Unix platforms only)\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jsc.cpp:        fprintf(stderr, "Could not open file: %s\n", fileName.utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/MD5.cpp:        snprintf(buf, 3, "%02x", digest.at(i));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:    printf("\nWTF::HashTable statistics\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:    printf("%d accesses\n", numAccesses);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:    printf("%d total collisions, average %.2f probes per access\n", numCollisions, 1.0 * (numAccesses + numCollisions) / numAccesses);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:    printf("longest collision chain: %d\n", maxCollisions);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:        printf("  %d lookups with exactly %d collisions (%.2f%% , %.2f%% with this many or more)\n", collisionGraph[i], i, 100.0 * (collisionGraph[i] - collisionGraph[i+1]) / numAccesses, 100.0 * collisionGraph[i] / numAccesses);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:    printf("%d rehashes\n", numRehashes);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/HashTable.cpp:    printf("%d reinserts\n", numReinserts);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:// The vprintf_stderr_common function triggers this error in the Mac build.
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:static void vprintf_stderr_common(const char* format, va_list args)
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    int size = vsnprintf(0, 0, format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:        vsnprintf(buffer.data(), size, format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:            if (_vsnprintf(buffer, size, format, args) != -1) {
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vfprintf(stdout, format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vfprintf(stderr, format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:static void printf_stderr_common(const char* format, ...)
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vprintf_stderr_common(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("%s(%d) : %s\n", file, line, function);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:        printf_stderr_common("ASSERTION FAILED: %s\n", assertion);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:        printf_stderr_common("SHOULD NEVER BE REACHED\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("ASSERTION FAILED: ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vprintf_stderr_common(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("\n%s\n", assertion);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("ARGUMENT BAD: %s, %s\n", argName, assertion);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:                fprintf(stderr, "%-3d %s\n", i, demangledName);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:                fprintf(stderr, "%-3d %s\n", i, mangledName);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:            fprintf(stderr, "%-3d %p\n", i, pointer);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("FATAL ERROR: ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vprintf_stderr_common(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("ERROR: ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vprintf_stderr_common(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    printf_stderr_common("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vprintf_stderr_common(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:        printf_stderr_common("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:    vprintf_stderr_common(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/Assertions.cpp:        printf_stderr_common("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf("------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf("PageHeap: %d sizes; %6.1f MB free\n",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf("------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:      out->printf("%6u pages * %6u spans ~ %6.1f MB; %6.1f MB cum"
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf("Normal large spans:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:    out->printf("   [ %6" PRIuS " pages ] %6.1f MB\n",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf("Unmapped large spans:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:    out->printf("   [ %6" PRIuS " pages ] %6.1f MB\n",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf(">255   large * %6u spans ~ %6.1f MB; %6.1f MB cum"
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:    out->printf("------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:        out->printf("class %3d [ %8" PRIuS " bytes ] : "
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:  out->printf("------------------------------------------------\n"
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp:    malloc_printf("*** error for object %p: pointer being freed was not allocated\n", ptr);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/SHA1.cpp:        snprintf(buffer, 3, "%02X", digest.at(i));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    // Use QString::vsprintf to avoid the locale dependent formatting of vsnprintf.
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    buffer.vsprintf(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:        int written = vsnprintf(buffer.data(), bufferSize, format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    int result = _vscprintf(format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    int result = vsnprintf(&ch, 1, format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    // contents of args is undefined after the call to vsnprintf
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    // according to http://man.cx/snprintf(3)
./qt/src/3rdparty/webkit/Source/JavaScriptCore/wtf/text/WTFString.cpp:    vsnprintf(buffer.data(), buffer.size(), format, args);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/CallFrame.cpp:    printf("Callpoint => %s:%d\n", urlString.utf8().data(), signedLineNumber);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("Register frame: \n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("            use            |   address  |                value               \n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[global var]               | %10p | %-16s 0x%llx \n", it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[global var]               | %10p | %-16s %p \n", it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:        printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[this]                     | %10p | %-16s 0x%llx \n", it, v.description(), JSValue::encode(v)); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[this]                     | %10p | %-16s %p \n", it, v.description(), JSValue::encode(v)); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[param]                    | %10p | %-16s 0x%llx \n", it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[param]                    | %10p | %-16s %p \n", it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[CodeBlock]                | %10p | %p \n", it, (*it).codeBlock()); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[ScopeChain]               | %10p | %p \n", it, (*it).scopeChain()); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[CallerRegisters]          | %10p | %d \n", it, (*it).i()); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[ReturnPC]                 | %10p | %p \n", it, (*it).vPC()); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[ArgumentCount]            | %10p | %d \n", it, (*it).i()); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("[Callee]                   | %10p | %p \n", it, (*it).function()); ++it;
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[r%2d]                      | %10p | %-16s 0x%llx \n", registerCount, it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[r%2d]                      | %10p | %-16s %p \n", registerCount, it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[r%2d]                      | %10p | %-16s 0x%llx \n", registerCount, it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:            printf("[r%2d]                      | %10p | %-16s %p \n", registerCount, it, v.description(), JSValue::encode(v));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/interpreter/Interpreter.cpp:    printf("-----------------------------------------------------------------------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/yarr/YarrInterpreter.cpp:        printf("ByteDisjunction(%p):\n\t", disjunction);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/yarr/YarrInterpreter.cpp:            printf("{ %d } ", disjunction->terms[i].type);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/yarr/YarrInterpreter.cpp:        printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    snprintf(buffer, sizeof(buffer), "%p", p);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("[%4d] %s\t\t %s, %s\n", location, op, registerName(exec, r0).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("[%4d] %s\t\t %s, %s, %s\n", location, op, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("[%4d] %s\t\t %s, %d(->%d)\n", location, op, registerName(exec, r0).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("[%4d] %s\t %s, %s, %s\n", location, op, registerName(exec, r0).data(), registerName(exec, r1).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("[%4d] %s\t %s, %s, %s\n", location, op, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("  [%4d] %s: %s\n", instructionOffset, "resolve_global", pointerToSourceString(resolveInfo.structure).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s\n", instructionOffset, "get_by_id_self", pointerToSourceString(stubInfo.u.getByIdSelf.baseObjectStructure).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s, %s\n", instructionOffset, "get_by_id_proto", pointerToSourceString(stubInfo.u.getByIdProto.baseObjectStructure).utf8().data(), pointerToSourceString(stubInfo.u.getByIdProto.prototypeStructure).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s, %s\n", instructionOffset, "get_by_id_chain", pointerToSourceString(stubInfo.u.getByIdChain.baseObjectStructure).utf8().data(), pointerToSourceString(stubInfo.u.getByIdChain.chain).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s (%d)\n", instructionOffset, "op_get_by_id_self_list", pointerToSourceString(stubInfo.u.getByIdSelfList.structureList).utf8().data(), stubInfo.u.getByIdSelfList.listSize);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s (%d)\n", instructionOffset, "op_get_by_id_proto_list", pointerToSourceString(stubInfo.u.getByIdProtoList.structureList).utf8().data(), stubInfo.u.getByIdProtoList.listSize);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s, %s, %s\n", instructionOffset, "put_by_id_transition", pointerToSourceString(stubInfo.u.putByIdTransition.previousStructure).utf8().data(), pointerToSourceString(stubInfo.u.putByIdTransition.structure).utf8().data(), pointerToSourceString(stubInfo.u.putByIdTransition.chain).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s\n", instructionOffset, "put_by_id_replace", pointerToSourceString(stubInfo.u.putByIdReplace.baseObjectStructure).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s\n", instructionOffset, "get_by_id");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s\n", instructionOffset, "put_by_id");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s\n", instructionOffset, "op_get_by_id_generic");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s\n", instructionOffset, "op_put_by_id_generic");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s\n", instructionOffset, "op_get_array_length");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s\n", instructionOffset, "op_get_string_length");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("  [%4d] %s: %s\n", instructionOffset, name, pointerToSourceString(vPC[operand].u.structure).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s, %s\n", instructionOffset, "get_by_id_proto", pointerToSourceString(vPC[4].u.structure).utf8().data(), pointerToSourceString(vPC[5].u.structure).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s, %s, %s\n", instructionOffset, "put_by_id_transition", pointerToSourceString(vPC[4].u.structure).utf8().data(), pointerToSourceString(vPC[5].u.structure).utf8().data(), pointerToSourceString(vPC[6].u.structureChain).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("  [%4d] %s: %s, %s\n", instructionOffset, "get_by_id_chain", pointerToSourceString(vPC[4].u.structure).utf8().data(), pointerToSourceString(vPC[5].u.structureChain).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("No instructions available.\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("%lu m_instructions; %lu bytes at %p; %d parameter(s); %d callee register(s)\n\n",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nIdentifiers:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("  id%u = %s\n", static_cast<unsigned>(i), m_identifiers[i].ustring().utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nConstants:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("   k%u = %s\n", registerIndex, valueToSourceString(exec, m_constantRegisters[i].get()).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nm_regexps:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("  re%u = %s\n", static_cast<unsigned>(i), regexpToSourceString(m_rareData->m_regexps[i].get()).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nStructures:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nStructures:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nException Handlers:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("\t %d: { start: [%4d] end: [%4d] target: [%4d] }\n", i + 1, m_rareData->m_exceptionHandlers[i].start, m_rareData->m_exceptionHandlers[i].end, m_rareData->m_exceptionHandlers[i].target);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("Immediate Switch Jump Tables:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("  %1d = {\n", i);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:                printf("\t\t%4d => %04d\n", entry + m_rareData->m_immediateSwitchJumpTables[i].min, *iter);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("      }\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nCharacter Switch Jump Tables:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("  %1d = {\n", i);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:                printf("\t\t\"%s\" => %04d\n", UString(&ch, 1).utf8().data(), *iter);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("      }\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:        printf("\nString Switch Jump Tables:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("  %1d = {\n", i);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:                printf("\t\t\"%s\" => %04d\n", UString(iter->first).utf8().data(), iter->second.branchOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("      }\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] enter\n", location);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] create_activation %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] create_arguments\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] init_lazy_reg\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] op_get_callee %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] create_this %s %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] convert_this %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] convert_this_strict %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] new_object\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] new_array\t %s, %s, %d\n", location, registerName(exec, dst).data(), registerName(exec, argv).data(), argc);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] new_regexp\t %s, %s\n", location, registerName(exec, r0).data(), regexpName(re0, regexp(re0)).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] mov\t\t %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] pre_inc\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] pre_dec\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] check_has_instance\t\t %s\n", location, registerName(exec, base).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] instanceof\t\t %s, %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data(), registerName(exec, r3).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] resolve\t\t %s, %s\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] resolve_skip\t %s, %s, %d\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data(), skipLevels);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] resolve_global\t %s, %s\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] resolve_global_dynamic\t %s, %s, %s, %d\n", location, registerName(exec, r0).data(), valueToSourceString(exec, scope).utf8().data(), idName(id0, m_identifiers[id0]).data(), depth);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] get_scoped_var\t %s, %d, %d\n", location, registerName(exec, r0).data(), index, skipLevels);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] put_scoped_var\t %d, %d, %s\n", location, index, skipLevels, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] get_global_var\t %s, %d\n", location, registerName(exec, r0).data(), index);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] put_global_var\t %d, %s\n", location, index, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] resolve_base%s\t %s, %s\n", location, isStrict ? "_strict" : "", registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] ensure_property_exists\t %s, %s\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] resolve_with_base %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] put_getter\t %s, %s, %s\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] put_setter\t %s, %s, %s\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] method_check\n", location);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] del_by_id\t %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), idName(id0, m_identifiers[id0]).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] get_by_val\t %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] get_argument_by_val\t %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] get_by_pname\t %s, %s, %s, %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data(), registerName(exec, r3).data(), registerName(exec, r4).data(), registerName(exec, r5).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] put_by_val\t %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] del_by_val\t %s, %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] put_by_index\t %s, %u, %s\n", location, registerName(exec, r0).data(), n0, registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jmp\t\t %d(->%d)\n", location, offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] loop\t\t %d(->%d)\n", location, offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jneq_ptr\t\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jnless\t\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jnlesseq\t\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] loop_if_less\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jless\t\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jlesseq\t\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] loop_if_lesseq\t %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] switch_imm\t %d, %d(->%d), %s\n", location, tableIndex, defaultTarget, location + defaultTarget, registerName(exec, scrutineeRegister).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] switch_char\t %d, %d(->%d), %s\n", location, tableIndex, defaultTarget, location + defaultTarget, registerName(exec, scrutineeRegister).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] switch_string\t %d, %d(->%d), %s\n", location, tableIndex, defaultTarget, location + defaultTarget, registerName(exec, scrutineeRegister).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] new_func\t\t %s, f%d, %s\n", location, registerName(exec, r0).data(), f0, shouldCheck ? "<Checked>" : "<Unchecked>");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] new_func_exp\t %s, f%d\n", location, registerName(exec, r0).data(), f0);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] call\t\t %s, %d, %d\n", location, registerName(exec, func).data(), argCount, registerOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] call_eval\t %s, %d, %d\n", location, registerName(exec, func).data(), argCount, registerOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] call_varargs\t %s, %s, %d\n", location, registerName(exec, func).data(), registerName(exec, argCount).data(), registerOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] tear_off_activation\t %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] tear_off_arguments\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] ret\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] op_call_put_result\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] constructor_ret\t\t %s %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] construct\t %s, %d, %d\n", location, registerName(exec, func).data(), argCount, registerOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] strcat\t\t %s, %s, %d\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), count);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] to_primitive\t %s, %s\n", location, registerName(exec, r0).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] get_pnames\t %s, %s, %s, %s, %d(->%d)\n", location, registerName(exec, r0).data(), registerName(exec, r1).data(), registerName(exec, r2).data(), registerName(exec, r3).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] next_pname\t %s, %s, %s, %s, %s, %d(->%d)\n", location, registerName(exec, dest).data(), registerName(exec, base).data(), registerName(exec, i).data(), registerName(exec, size).data(), registerName(exec, iter).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] push_scope\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] pop_scope\n", location);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] push_new_scope \t%s, %s, %s\n", location, registerName(exec, r0).data(), idName(id0, m_identifiers[id0]).data(), registerName(exec, r1).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jmp_scopes\t^%d, %d(->%d)\n", location, scopeDelta, offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] catch\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] throw\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] throw_reference_error\t %s\n", location, constantName(exec, k0, getConstant(k0)).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] jsr\t\t %s, %d(->%d)\n", location, registerName(exec, retAddrDst).data(), offset, location + offset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] sret\t\t %s\n", location, registerName(exec, retAddrSrc).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] debug\t\t %s, %d, %d\n", location, debugHookName(debugHookID), firstLine, lastLine);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] profile_will_call %s\n", location, registerName(exec, function).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] profile_did_call\t %s\n", location, registerName(exec, function).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:            printf("[%4d] end\t\t %s\n", location, registerName(exec, r0).data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of live CodeBlocks: %d\n", liveCodeBlockSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Size of a single CodeBlock [sizeof(CodeBlock)]: %zu\n", sizeof(CodeBlock));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Size of all CodeBlocks: %zu\n", totalSize);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Average size of a CodeBlock: %zu\n", totalSize / liveCodeBlockSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of FunctionCode CodeBlocks: %zu (%.3f%%)\n", isFunctionCode, static_cast<double>(isFunctionCode) * 100.0 / liveCodeBlockSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of GlobalCode CodeBlocks: %zu (%.3f%%)\n", isGlobalCode, static_cast<double>(isGlobalCode) * 100.0 / liveCodeBlockSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of EvalCode CodeBlocks: %zu (%.3f%%)\n", isEvalCode, static_cast<double>(isEvalCode) * 100.0 / liveCodeBlockSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of CodeBlocks with rare data: %zu (%.3f%%)\n", hasRareData, static_cast<double>(hasRareData) * 100.0 / liveCodeBlockSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    #define PRINT_STATS(name) printf("Number of CodeBlocks with " #name ": %zu\n", name##IsNotEmpty); printf("Size of all " #name ": %zu\n", name##TotalSize); 
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of CodeBlocks with evalCodeCache: %zu\n", evalCodeCacheIsNotEmpty);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Number of CodeBlocks with symbolTable: %zu\n", symbolTableIsNotEmpty);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Size of all symbolTables: %zu\n", symbolTableTotalSize);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/CodeBlock.cpp:    printf("Dumping CodeBlock statistics is not enabled.\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("\nExecuted opcode statistics\n"); 
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("Total instructions executed: %lld\n\n", totalInstructions);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("All opcodes by frequency:\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:        printf("%s:%s %lld - %.2f%%\n", opcodeNames[index], padOpcodeName((OpcodeID)index, 28), opcodeCounts[index], ((double) opcodeCounts[index]) / ((double) totalInstructions) * 100.0);    
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("2-opcode sequences by frequency: %lld\n\n", totalInstructions);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:        printf("%s%s %s:%s %lld %.2f%%\n", opcodeNames[indexPair.first], padOpcodeName((OpcodeID)indexPair.first, 28), opcodeNames[indexPair.second], padOpcodeName((OpcodeID)indexPair.second, 28), count, ((double) count) / ((double) totalInstructionPairs) * 100.0);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("Most common opcodes and sequences:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:        printf("\n%s:%s %lld - %.2f%%\n", opcodeNames[index], padOpcodeName((OpcodeID)index, 28), opcodeCount, opcodeProportion * 100.0);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:            printf("    %s%s %s:%s %lld - %.2f%%\n", opcodeNames[indexPair.first], padOpcodeName((OpcodeID)indexPair.first, 28), opcodeNames[indexPair.second], padOpcodeName((OpcodeID)indexPair.second, 28), pairCount, pairProportion * 100.0);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/Opcode.cpp:    printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:        printf("\nSamplingFlags: sample counts with flags set: (%lld total)\n", total);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("  [ %02d ] : %lld\t\t(%03.2f%%)\n", i, s_flagCounts[i], (100.0 * s_flagCounts[i]) / total);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:        printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\nSamplingFlags: no samples.\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\nBytecode samples [*]\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("                             sample   %% of       %% of     |   cti     cti %%\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("opcode                       count     VM        total    |  count   of self\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("-------------------------------------------------------   |  ----------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:        fprintf(stdout, "%s:%s%-6lld %.3f%%\t%.3f%%\t  |   %-6lld %.3f%%\n", opcodeName, opcodePadding, count, percentOfVM, percentOfTotal, countInCTIFunctions, percentInCTIFunctions);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\n[*] Samples inside host code are not charged to any Bytecode.\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\tSamples inside VM:\t\t%lld / %lld (%.3f%%)\n", m_opcodeSampleCount, m_sampleCount, (static_cast<double>(m_opcodeSampleCount) * 100) / m_sampleCount);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\tSamples inside host code:\t%lld / %lld (%.3f%%)\n\n", m_sampleCount - m_opcodeSampleCount, m_sampleCount, (static_cast<double>(m_sampleCount - m_opcodeSampleCount) * 100) / m_sampleCount);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\tsample count:\tsamples inside this opcode\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\t%% of VM:\tsample count / all opcode samples\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\t%% of total:\tsample count / all samples\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\t--------------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\tcti count:\tsamples inside a CTI function called by this opcode\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\tcti %% of self:\tcti count / sample count\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:    printf("\nCodeBlock samples\n\n"); 
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:            printf("#%d: %s:%d: %d / %lld (%.3f%%)\n", i + 1, record->m_executable->sourceURL().utf8().data(), codeBlock->lineNumberForBytecodeOffset(0), record->m_sampleCount, m_sampleCount, blockPercent);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("    Opcode and line number samples [*]\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                        printf("    [% 4d] has sample count: % 4d\n", op, count);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                    printf("    Line #%d has sample count %d.\n", lineCountInfo[lineno].line, lineCountInfo[lineno].count);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("    [*] Samples inside host code are charged to the calling Bytecode.\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("        Samples on a call / return boundary are not charged to a specific opcode or line.\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:                printf("            Samples on a call / return boundary: %d / %d (%.3f%%)\n\n", record->m_sampleCount - record->m_opcodeSampleCount, record->m_sampleCount, (static_cast<double>(record->m_sampleCount - record->m_opcodeSampleCount) * 100) / record->m_sampleCount);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:        printf("\nSampling Counter Values:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:            printf("\t%s\t: %lld\n", currCounter->m_name, currCounter->m_counter);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/bytecode/SamplingTool.cpp:        printf("\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGNonSpeculativeJIT.cpp:        fprintf(stderr, "NonSpeculativeJIT generating Node @%d at code offset 0x%x\n", (int)m_compileIndex, m_jit.debugOffset());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:        fprintf(stderr, "<%s>\n", label);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:    fprintf(stderr, "  gprs:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:    fprintf(stderr, "  fprs:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:    fprintf(stderr, "  VirtualRegisters:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "    % 3d:%s%s", i, dataFormatString(info.registerFormat()), dataFormatString(info.spillFormat()));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "    % 3d:[__][__]", i);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, ":fpr%d\n", info.fpr());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, ":%s\n", GPRInfo::debugName(info.gpr()));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:        fprintf(stderr, "</%s>\n", label);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "DFG_CONSISTENCY_CHECK failed: gpr %s is locked.\n", iter.debugName());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "DFG_CONSISTENCY_CHECK failed: fpr %s is locked.\n", iter.debugName());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:                fprintf(stderr, "DFG_CONSISTENCY_CHECK failed: name mismatch for virtual register %d (gpr %s).\n", virtualRegister, GPRInfo::debugName(gpr));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:                fprintf(stderr, "DFG_CONSISTENCY_CHECK failed: name mismatch for virtual register %d (fpr %s).\n", virtualRegister, FPRInfo::debugName(fpr));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "DFG_CONSISTENCY_CHECK failed: name mismatch for gpr %s (virtual register %d).\n", iter.debugName(), virtualRegister);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCodeGenerator.cpp:            fprintf(stderr, "DFG_CONSISTENCY_CHECK failed: name mismatch for fpr %s (virtual register %d).\n", iter.debugName(), virtualRegister);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:    printf("% 4d:\t<%c%u:", (int)nodeIndex, mustGenerate ? '!' : ' ', refCount);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%u", node.virtualRegister());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("-");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:    printf(">\t%s(", dfgOpNames[op & NodeIdMask]);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("@%u", node.child1);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf(", @%u", node.child2);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf(", @%u", node.child3);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%svar%u", hasPrinted ? ", " : "", node.varNumber());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:            printf("%sid%u{%s}", hasPrinted ? ", " : "", node.identifierNumber(), codeBlock->identifier(node.identifierNumber()).ustring().utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:            printf("%sid%u", hasPrinted ? ", " : "", node.identifierNumber());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:            printf("%sarg%u", hasPrinted ? ", " : "", local - codeBlock->thisRegister());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:            printf("%sr%u", hasPrinted ? ", " : "", local);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%s$%u{%d|0x%08x}", hasPrinted ? ", " : "", node.constantNumber(), node.int32Constant(), node.int32Constant());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%s$%u{%f})", hasPrinted ? ", " : "", node.constantNumber(), node.numericConstant());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%s$%u", hasPrinted ? ", " : "", node.constantNumber());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%sT:#%u", hasPrinted ? ", " : "", blockIndexForBytecodeOffset(node.takenBytecodeOffset()));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("%sF:#%u", hasPrinted ? ", " : "", blockIndexForBytecodeOffset(node.notTakenBytecodeOffset()));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:    printf(")\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:        printf("Block #%u:\n", (int)b);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGGraph.cpp:    printf("Phi Nodes:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGJITCompiler.cpp:    fprintf(stderr, "JIT code start at %p\n", linkBuffer.debugAddress());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:        fprintf(stderr, "SpeculativeJIT generating Node @%d at JIT offset 0x%x\n", (int)m_compileIndex, m_jit.debugOffset());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp:            fprintf(stderr, "    ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp:        fprintf(stderr, "%08x: [%016llx]\n", (int)parentOffset, m_allocated);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp:            fprintf(stderr, "    ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp:        fprintf(stderr, "%08x: [", (int)parentOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp:            fprintf(stderr, "%c", c);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp:        fprintf(stderr, "]\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/UString.cpp:        snprintf(minBuf, sizeof(minBuf), "%d", INT_MIN);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/UString.cpp:        snprintf(minBuf, sizeof(minBuf), "%I64d", std::numeric_limits<long long>::min());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/UString.cpp:        snprintf(minBuf, sizeof(minBuf), "%lld", std::numeric_limits<long long>::min());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/UString.cpp:        snprintf(minBuf, sizeof(minBuf), "%ld", LONG_MIN);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "<JSValue()>");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "Int32: %d", asInt32());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "Double: %lf", asDouble());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "Cell: %p", asCell());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "True");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "False");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "Null");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "Undefined");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSValue.cpp:        snprintf(description, size, "INVALID");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DateConversion.cpp:    snprintf(buffer, DateConversionBufferSize, "%s %s %02d %04d",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DateConversion.cpp:    snprintf(buffer, DateConversionBufferSize, "%s, %02d %s %04d",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DateConversion.cpp:        snprintf(buffer, DateConversionBufferSize, "%02d:%02d:%02d GMT%c%02d%02d (%s)",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DateConversion.cpp:        snprintf(buffer, DateConversionBufferSize, "%02d:%02d:%02d GMT%c%02d%02d",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DateConversion.cpp:    snprintf(buffer, DateConversionBufferSize, "%02d:%02d:%02d GMT", t.hour, t.minute, t.second);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp:            snprintf(tmp, sizeof(tmp), "%%%02X", static_cast<unsigned char>(c));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp:            snprintf(tmp, sizeof(tmp), "%%u%04X", u);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp:            snprintf(tmp, sizeof(tmp), "%%%02X", u);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Number of live Structures: %d\n", liveStructureSet.size());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Number of Structures using the single item optimization for transition map: %d\n", numberUsingSingleSlot);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Number of Structures that are leaf nodes: %d\n", numberLeaf);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Number of Structures that singletons: %d\n", numberSingletons);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Number of Structures with PropertyMaps: %d\n", numberWithPropertyMaps);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Size of a single Structures: %d\n", static_cast<unsigned>(sizeof(Structure)));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Size of sum of all property maps: %d\n", totalPropertyMapsSize);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Size of average of all property maps: %f\n", static_cast<double>(totalPropertyMapsSize) / static_cast<double>(liveStructureSet.size()));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("Dumping Structure statistics is not enabled.\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("\nJSC::PropertyMap statistics\n\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("%d probes\n", numProbes);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("%d collisions (%.1f%%)\n", numCollisions, 100.0 * numCollisions / numProbes);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("%d rehashes\n", numRehashes);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/Structure.cpp:    printf("%d removes\n", numRemoves);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:        fprintf(stderr, "RegExp Discrepency for /%s/\n    string input ", pattern().utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:        fprintf(stderr, (segmentLen < 150) ? "\"%s\"\n" : "\"%148s...\"\n", s.utf8().data() + startOffset);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:            fprintf(stderr, "    JIT result = %d, blah interpreted result = %d\n", jitResult, interpreterResult);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:            fprintf(stderr, "    Correct result = %d\n", jitResult);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:                    fprintf(stderr, "    JIT offset[%d] = %d, interpreted offset[%d] = %d\n", j, offsetVector[j], j, interpreterOffsetVector[j]);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:                    fprintf(stderr, "    JIT offset[%d] = %d, interpreted offset[%d] = %d\n", j+1, offsetVector[j+1], j+1, interpreterOffsetVector[j+1]);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:        snprintf(formattedPattern, 41, (pattLen <= 38) ? "/%.38s/" : "/%.36s...", rawPattern);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:            snprintf(jitAddr, jitAddrSize, "fallback");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:            snprintf(jitAddr, jitAddrSize, "0x%014lx", reinterpret_cast<unsigned long int>(codeBlock.getAddr()));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/RegExp.cpp:        printf("%-40.40s %16.16s %10d %10d\n", formattedPattern, jitAddr, m_rtMatchCallCount, m_rtMatchFoundCount);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DatePrototype.cpp:        snprintf(yearString, yearLen, "%d", localTM.tm_year + 1900);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DatePrototype.cpp:        snprintf(yearString, yearLen, "%d", year);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/DatePrototype.cpp:    snprintf(buffer, sizeof(buffer) - 1, "%04d-%02d-%02dT%02d:%02d:%02d.%03dZ", 1900 + gregorianDateTime->year, gregorianDateTime->month + 1, gregorianDateTime->monthDay, gregorianDateTime->hour, gregorianDateTime->minute, gregorianDateTime->second, static_cast<int>(fmod(thisDateObj->internalNumber(), 1000)));
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/ScopeChain.cpp:        fprintf(stderr, "----- [scope %p] -----\n", o);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/ScopeChain.cpp:            fprintf(stderr, "%s, ", name.ustring().utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/ScopeChain.cpp:        fprintf(stderr, "\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalData.cpp:        printf("\nRegExp Tracing\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalData.cpp:        printf("                                                            match()    matches\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalData.cpp:        printf("Regular Expression                          JIT Address      calls      found\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalData.cpp:        printf("----------------------------------------+----------------+----------+----------\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/runtime/JSGlobalData.cpp:        printf("%d Regular Expressions\n", reCount);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:        printf("  ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:    printf("Function Name %s %d SelfTime %.3fms/%.3f%% TotalTime %.3fms/%.3f%% VSelf %.3fms VTotal %.3fms Visible %s Next Sibling %s\n",
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:    printf("    ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:            printf("  ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:        printf("%.0f %s\n", sampleCount ? sampleCount : 1, name);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:        printf("%s\n", name);
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:        printf("    ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:            printf("  ");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/ProfileNode.cpp:        printf("%.0f %s\n", sampleCount - sumOfChildrensCount, functionName().utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/Profile.cpp:    printf("Call graph:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/Profile.cpp:    printf("Call graph:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/Profile.cpp:    printf("\nTotal number in stack:\n");
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/Profile.cpp:        printf("        %-12d%s\n", (*it).second, UString((*it).first).utf8().data());
./qt/src/3rdparty/webkit/Source/JavaScriptCore/profiler/Profile.cpp:    printf("\nSort by top of stack, same collapsed (when >= 5):\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/Api/qwebpage.cpp:            fprintf (stdout, "CONSOLE MESSAGE: line %d: %s\n", lineNumber, message.toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didHandleOnloadEventsForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didReceiveServerRedirectForProvisionalLoadForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didCancelClientRedirectForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - willPerformClientRedirectToURL: %s \n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)), qPrintable(drtDescriptionSuitableForTestResult(url)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didChangeLocationWithinPageForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - dispatchDidPushStateWithinPage\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - dispatchDidReplaceStateWithinPage\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - dispatchDidPopStateWithinPage\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didStartProvisionalLoadForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - in didStartProvisionalLoadForFrame\n", qPrintable(drtPrintFrameUserGestureStatus(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didReceiveTitle: %s\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)), qPrintable(QString(title.string())));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didChangeIcons\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didCommitLoadForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didFinishDocumentLoadForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:            printf("%s - has %u onunload handler(s)\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)), unloadEventCount);
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didFinishLoadForFrame\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("postProgressFinishedNotification\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("WebView updated the title for history URL \"%s\" to \"%s\".\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("WebView navigated to url \"%s\" with title \"%s\" with HTTP equivalent method \"%s\".  The navigation was %s and was %s%s.\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:            printf("WebView performed a client redirect from \"%s\" to \"%s\".\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:            printf("WebView performed a server redirect from \"%s\" to \"%s\".\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("didDisplayInsecureContent\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("didRunInsecureContent\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - willSendRequest %s redirectResponse %s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("Returning null for this redirect\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("Blocked access to external URL %s\n", qPrintable(drtDescriptionSuitableForTestResult(newRequest.url())));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didReceiveResponse %s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s has MIME type %s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didFinishLoading\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didFailLoadingWithError: %s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didFailProvisionalLoadWithError\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("%s - didFailLoadWithError\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp:        printf("Policy delegate: attempt to load %s with navigation type '%s'%s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/ChromeClientQt.cpp:        printf("Asked to populate visited links for WebView \"%s\"\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:            printf("DESKTOP NOTIFICATION CLOSED: %s\n", QString(notification->url().string()).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:            printf("DESKTOP NOTIFICATION CLOSED: %s\n", QString(notification->contents().title()).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:        printf("DESKTOP NOTIFICATION PERMISSION REQUESTED: %s\n", QString(context->securityOrigin()->toString()).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:        printf("DESKTOP NOTIFICATION PERMISSION REQUEST CANCELLED: %s\n", QString(context->securityOrigin()->toString()).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:        printf("REPLACING NOTIFICATION %s\n", notification->isHTML() ? QString(notification->url().string()).toUtf8().constData() : QString(notification->contents().title()).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:        printf("DESKTOP NOTIFICATION: contents at %s\n", QString(notification->url().string()).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/NotificationPresenterClientQt.cpp:        printf("DESKTOP NOTIFICATION:%s icon %s, title %s, text %s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/DumpRenderTreeSupportQt.cpp:    res = res.sprintf("viewport size %dx%d scale %f with limits [%f, %f] and userScalable %f\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldDeleteDOMRange:%s\n", dumpRange(range).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldBeginEditingInDOMRange:%s\n", dumpRange(range).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldEndEditingInDOMRange:%s\n", dumpRange(range).toUtf8().constData());
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldInsertText:%s replacingDOMRange:%s givenAction:%s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldChangeSelectedDOMRange:%s toDOMRange:%s affinity:%s stillSelecting:%s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldApplyStyle:%s toElementsInDOMRange:%s\n",
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: webViewDidBeginEditing:WebViewDidBeginEditingNotification\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: webViewDidChange:WebViewDidChangeNotification\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: webViewDidChangeSelection:WebViewDidChangeSelectionNotification\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp://     printf("%s\n", buffer);
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: webViewDidEndEditing:WebViewDidEndEditingNotification\n");
./qt/src/3rdparty/webkit/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp:        printf("EDITING DELEGATE: shouldInsertNode:%s replacingDOMRange:%s givenAction:%s\n", dumpPath(node).toUtf8().constData(),
./qt/src/3rdparty/harfbuzz/src/harfbuzz-shaper.cpp:#define DEBUG printf
./qt/src/3rdparty/harfbuzz/src/harfbuzz-shaper.cpp:#define DEBUG if (1) ; else printf
./qt/src/3rdparty/harfbuzz/src/harfbuzz-indic.cpp:    vfprintf(stderr, msg, ap);
./qt/src/3rdparty/harfbuzz/src/harfbuzz-indic.cpp:    fprintf(stderr, "\n");
./qt/src/3rdparty/harfbuzz/src/harfbuzz-indic.cpp:#define IDEBUG if(0) printf
./qt/src/gui/image/qxbmhandler.cpp:    qsnprintf(buf, msize, "#define %s_width %d\n", s.toAscii().data(), w);
./qt/src/gui/image/qxbmhandler.cpp:    qsnprintf(buf, msize, "#define %s_height %d\n", s.toAscii().data(), h);
./qt/src/gui/image/qxbmhandler.cpp:    qsnprintf(buf, msize, "static char %s_bits[] = {\n ", s.toAscii().data());
./qt/src/gui/image/qpixmap.cpp:            printf("Lighthouse plugin does not support threaded pixmaps!\n");
./qt/src/gui/image/qxpmhandler.cpp:            line.sprintf("\"%s c None\"",
./qt/src/gui/image/qxpmhandler.cpp:            line.sprintf("\"%s c #%02x%02x%02x\"",
./qt/src/gui/dialogs/qprintpreviewdialog.cpp:    zoomFactor->lineEdit()->setText(QString().sprintf("%.1f%%", preview->zoomFactor()*100));
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("---[ DIRECT PAINTING ]------------------> Name(%-10s) Part(%d) State(%d)\n",
./qt/src/gui/styles/qwindowsxpstyle.cpp:        ::sprintf(buf, "+ Pixmap(%3d, %3d) ]", w, h);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("---[ CACHED %s--------> Name(%-10s) Part(%d) State(%d)\n",
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("---[ NOT CACHED ]-----------------------> Name(%-10s) Part(%d) State(%d)\n",
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("-->partIsTransparen      = %d\n", partIsTransparent);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("-->inspectData           = %d\n", inspectData);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("-->potentialInvalidAlpha = %d\n", potentialInvalidAlpha);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("Image format is: %s\n", alphaType == RealAlpha ? "Real Alpha" : alphaType == MaskAlpha ? "Masked Alpha" : "No Alpha");
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("Using region:\n");
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("    (%d, %d, %d, %d)\n", r.x(), r.y(), r.right(), r.bottom());
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("+++Adding pixmap to cache, size(%d, %d), wasAlphaSwapped(%d), wasAlphaFixed(%d), name(%s)\n",
./qt/src/gui/styles/qwindowsxpstyle.cpp:        bufferPos += sprintf(bufferPos, "const int pixelBufferW%d = %d;\n", pCount, w);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        bufferPos += sprintf(bufferPos, "const int pixelBufferH%d = %d;\n", pCount, h);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        bufferPos += sprintf(bufferPos, "const unsigned DWORD pixelBuffer%d[] = {", pCount);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            bufferPos += sprintf(bufferPos, "\n    ");
./qt/src/gui/styles/qwindowsxpstyle.cpp:                bufferPos += sprintf(bufferPos, "0x%08x, ", *bufPix);
./qt/src/gui/styles/qwindowsxpstyle.cpp:        bufferPos += sprintf(bufferPos, "\n};\n\n");
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf(bufferDump);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sString)  %-20S: %S\n", originStr, prop.propName, buffer);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sEnum)    %-20S: %d\n", originStr, prop.propName, result);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sint)     %-20S: %d\n", originStr, prop.propName, result);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sbool)    %-20S: %d\n", originStr, prop.propName, result);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%scolor)   %-20S: 0x%08X\n", originStr, prop.propName, result);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%smargins) %-20S: (%d, %d, %d, %d)\n", originStr,
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sfilename)%-20S: %S\n", originStr, prop.propName, buffer);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%ssize)    %-20S: Min (%d, %d),  True(%d, %d),  Draw(%d, %d)\n", originStr, prop.propName,
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sPosition)%-20S: (%d, %d)\n", originStr, prop.propName, result.x, result.y);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sRect)    %-20S: (%d, %d, %d, %d)\n", originStr, prop.propName, result.left, result.top, result.right, result.bottom);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sFont)    %-20S: %S  height(%d)  width(%d)  weight(%d)\n", originStr, prop.propName,
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("  (%sInt list)%-20S: { ", originStr, prop.propName);
./qt/src/gui/styles/qwindowsxpstyle.cpp:                printf("%d ", result.iValues[i]);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("}\n");
./qt/src/gui/styles/qwindowsxpstyle.cpp:        printf("    %s%S : Unknown property type (%d)!\n", originStr, prop.propName, prop.propType);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("part properties count = %d:\n", all_props.count());
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("      Enum  Property Name        Description\n");
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("-----------------------------------------------------------\n");
./qt/src/gui/styles/qwindowsxpstyle.cpp:                printf("%3d: (%4d) %-20S %S\n", j, prop.propValue, prop.propName, buf);
./qt/src/gui/styles/qwindowsxpstyle.cpp:            printf("Global Properties:\n");
./qt/src/gui/widgets/qlcdnumber.cpp:            s.sprintf("%*x", ndigits, num);
./qt/src/gui/widgets/qlcdnumber.cpp:            s.sprintf("%*i", ndigits, num);
./qt/src/gui/widgets/qlcdnumber.cpp:            s.sprintf("%*o", ndigits, num);
./qt/src/gui/widgets/qlcdnumber.cpp:            s.sprintf("%*.*g", ndigits, nd, num);
./qt/src/gui/painting/qpainterpath.cpp:    printf("\nQPainterPath: elementCount=%d\n", path.elementCount());
./qt/src/gui/painting/qpainterpath.cpp:        printf(" - %3d:: %s, (%.2f, %.2f)\n", i, names[e.type], e.x, e.y);
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::closeSubpath()\n");
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::moveTo() (%.2f,%.2f)\n", p.x(), p.y());
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::lineTo() (%.2f,%.2f)\n", p.x(), p.y());
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::cubicTo() (%.2f,%.2f), (%.2f,%.2f), (%.2f,%.2f)\n",
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::quadTo() (%.2f,%.2f), (%.2f,%.2f)\n",
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::arcTo() (%.2f, %.2f, %.2f, %.2f, angle=%.2f, sweep=%.2f\n",
./qt/src/gui/painting/qpainterpath.cpp:    printf("QPainterPath::toFillPolygons, subpathCount=%d\n", count);
./qt/src/gui/painting/qpainterpath.cpp:    printf("Intersections before flattening:\n");
./qt/src/gui/painting/qpainterpath.cpp:        printf("%d: ", i);
./qt/src/gui/painting/qpainterpath.cpp:            printf("%d ", isects[i][j]);
./qt/src/gui/painting/qpainterpath.cpp:        printf("\n");
./qt/src/gui/painting/qpainterpath.cpp:    printf("Intersections after flattening:\n");
./qt/src/gui/painting/qpainterpath.cpp:        printf("%d: ", i);
./qt/src/gui/painting/qpainterpath.cpp:            printf("%d ", isects[i][j]);
./qt/src/gui/painting/qpainterpath.cpp:        printf("\n");
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_scale_rgb16_on_rgb16: dst=(%p, %d), src=(%p, %d), target=(%d, %d), [%d x %d], src=(%d, %d) [%d x %d] alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_scale_argb24_on_rgb16: dst=(%p, %d), src=(%p, %d), target=(%d, %d), [%d x %d], src=(%d, %d) [%d x %d] alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_scale_argb32_on_rgb16: dst=(%p, %d), src=(%p, %d), target=(%d, %d), [%d x %d], src=(%d, %d) [%d x %d] alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_blend_rgb16_on_rgb16: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_blend_argb24_on_rgb16: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_blend_rgb32_on_rgb16: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    fprintf(stdout, "qt_blend_argb32_on_argb32: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    fprintf(stdout, "qt_blend_rgb32_on_rgb32: dst=(%p, %d), src=(%p, %d), dim=(%d, %d) alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_scale_rgb32_on_rgb32: dst=(%p, %d), src=(%p, %d), target=(%d, %d), [%d x %d], src=(%d, %d) [%d x %d] alpha=%d\n",
./qt/src/gui/painting/qblendfunctions.cpp:    printf("qt_scale_argb32_on_argb32: dst=(%p, %d), src=(%p, %d), target=(%d, %d), [%d x %d], src=(%d, %d) [%d x %d] alpha=%d\n",
./qt/src/gui/painting/qbackingstore.cpp:            fprintf(stderr,"FPS: %.1f\n",fps);
./qt/src/gui/painting/qpathclipper.cpp:    printf("** Adding edge %d / vertices: %.07f %.07f, %.07f %.07f\n", ei, fp->x, fp->y, sp->x, sp->y);
./qt/src/gui/painting/qpathclipper.cpp:    printf("sorted y coords:\n");
./qt/src/gui/painting/qpathclipper.cpp:        printf("%.9f\n", y_coords[i]);
./qt/src/gui/painting/qpathclipper.cpp:            printf("y: %.9f, gap: %.9f\n", bestY, biggestGap);
./qt/src/gui/painting/qpathclipper.cpp:        printf("y %f, x %f, inA: %d, inB: %d, inD: %d, inside: %d, flag: %x, bezier: %p, edge: %d\n", y, crossings.at(i).x, inA, inB, inD, inside, edge->flag, edge->bezier, ei);
./qt/src/gui/painting/qoutlinemapper.cpp:    printf("QOutlineMapper::convertPath(), size=%d\n", elmCount);
./qt/src/gui/painting/qoutlinemapper.cpp:    printf("QOutlineMapper::convertPath(VP), size=%d\n", count);
./qt/src/gui/painting/qoutlinemapper.cpp:    printf(" - control point rect (%.2f, %.2f) %.2f x %.2f, clip=(%d,%d, %dx%d)\n",
./qt/src/gui/painting/qoutlinemapper.cpp:    printf("QOutlineMapper::endOutline\n");
./qt/src/gui/painting/qoutlinemapper.cpp:    printf(" - contours: %d\n", m_outline.n_contours);
./qt/src/gui/painting/qoutlinemapper.cpp:        printf("   - %d\n", m_outline.contours[i]);
./qt/src/gui/painting/qoutlinemapper.cpp:    printf(" - points: %d\n", m_outline.n_points);
./qt/src/gui/painting/qoutlinemapper.cpp:        printf("   - %d -- %.2f, %.2f, (%d, %d)\n", i,
./qt/src/gui/painting/qpaintengine_raster.cpp:    fprintf(stderr,"\nQPainterPath: elementCount=%d\n", path.elementCount());
./qt/src/gui/painting/qpaintengine_raster.cpp:        fprintf(stderr," - %3d:: %s, (%.2f, %.2f)\n", i, names[e.type], e.x, e.y);
./qt/src/gui/painting/qpaintengine_raster.cpp:        printf("Clipping ratio: rectangular=%f%%, region=%f%%, complex=%f%%\n",
./qt/src/gui/painting/qpaintengine_raster.cpp:            // printf("drawing [%d %d %d %d] baseline [%d %d], glyph: %d, to: %d %d, pos: %d %d\n",
./qt/src/gui/painting/qpaintengine_raster.cpp:    fprintf(stderr," - QRasterPaintEngine::drawTextItem(), (%.2f,%.2f), string=%s ct=%d\n",
./qt/src/gui/painting/qpaintengine_raster.cpp:    fprintf(stderr,"clip %d: %d %d - %d %d\n", counter, x0, y0, x1, y1);
./qt/src/gui/painting/qstroker.cpp:    printf(" -----> joinPoints: around=(%.0f, %.0f), next_p1=(%.0f, %.f) next_p2=(%.0f, %.f)\n",
./qt/src/gui/painting/qstroker.cpp:    printf("angle: %f, t: %f\n", angle, t);
./qt/src/gui/painting/qstroker.cpp:    printf("cosAngle: %.10f, value: %.10f\n", cosAngle, a + b + c * QT_PATH_KAPPA);
./qt/src/gui/painting/qstroker.cpp:    printf("sinAngle: %.10f, value: %.10f\n", sinAngle, b * QT_PATH_KAPPA + c + d);
./qt/src/gui/painting/qtextureglyphcache.cpp:    printf("Populating with %d glyphs\n", numGlyphs);
./qt/src/gui/painting/qtextureglyphcache.cpp:        printf("(%4x): w=%.2f, h=%.2f, xoff=%.2f, yoff=%.2f, x=%.2f, y=%.2f\n",
./qt/src/gui/painting/qtextureglyphcache.cpp:    printf("fillTexture of %dx%d at %d,%d in the cache of %dx%d\n", c.w, c.h, c.x, c.y, m_image.width(), m_image.height());
./qt/src/gui/painting/qtextureglyphcache.cpp:        printf("   ERROR; mask is bigger than reserved space! %dx%d instead of %dx%d\n", mask.width(), mask.height(), c.w,c.h);
./qt/src/gui/painting/qprinterinfo_unix.cpp:            tmp.sprintf("/etc/lp/printers/%s/configuration",
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("<</Type /Outlines /First %d 0 R\n/Last %d 0 R>>\nendobj\n",
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("<</Type/Font/Name/Helv/BaseFont/Helvetica/Subtype/Type1>>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("<</Fields[");
./qt/src/gui/painting/qprintengine_pdf.cpp:           d->xprintf("%d 0 R ",i);
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("]\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/Outlines %d 0 R\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/AcroForm %d 0 R\n", d->formFieldList);
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/Dests <<\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:            d->xprintf(" %d 0 R\n", i.value());
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf(">>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf(">>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.left(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.top(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.right(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s", qt_real_to_string(rr.bottom(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("]\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/AS /Yes\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/T");
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("/Ff %d\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.left(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.top(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.right(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s", qt_real_to_string(rr.bottom(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("]\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/V");
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/T");
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        d->xprintf("/MaxLen %d\n",maxLength);
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("/DA(/Helv 12 Tf 0 g)\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/");
./qt/src/gui/painting/qprintengine_pdf.cpp:            xprintf("%c", c);
./qt/src/gui/painting/qprintengine_pdf.cpp:            xprintf("#%02x", c);
./qt/src/gui/painting/qprintengine_pdf.cpp:       xprintf("<</Title ");
./qt/src/gui/painting/qprintengine_pdf.cpp:       xprintf("\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:       xprintf("\n  /Count 0\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:           xprintf("  /Next %d 0 R\n", i->next->obj);
./qt/src/gui/painting/qprintengine_pdf.cpp:           xprintf("  /Prev %d 0 R\n", i->prev->obj);
./qt/src/gui/painting/qprintengine_pdf.cpp:           xprintf("  /First %d 0 R\n", i->firstChild->obj);
./qt/src/gui/painting/qprintengine_pdf.cpp:           xprintf("  /Last %d 0 R\n", i->lastChild->obj);
./qt/src/gui/painting/qprintengine_pdf.cpp:       xprintf(">>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:            xprintf("<< /SMask << /S /Alpha /G %d 0 R >> >>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("%s\nendobj\n", alphaDef.constData());
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("<<\n/Type /Annot\n/Subtype /Link\n/Rect [%f %f %f %f]\n/Border [16 16 1]\n/A <<\n",
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("<<\n/Type /Annot\n/Subtype /Link\n/Rect [%f %f %f %f]\n/Border [0 0 0]\n/A <<\n",
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Type /Action\n/S /URI\n/URI (%s)\n",
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf(">>\n>>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("endobj\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:void QPdfEnginePrivate::xprintf(const char* fmt, ...)
./qt/src/gui/painting/qprintengine_pdf.cpp:    int bufsize = qvsnprintf(buf, msize, fmt, args);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/ImageMask true\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/BitsPerComponent 8\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Mask %d 0 R\n", maskObject);
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/SMask %d 0 R\n", softMaskObject);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/Length %d 0 R\n", lenobj);
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Interpolate true\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Filter /DCTDecode\n>>\nstream\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:            xprintf("/Filter /FlateDecode\n>>\nstream\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:            xprintf(">>\nstream\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("endstream\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("%d\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("%%PDF-1.4\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("[/Pattern /DeviceRGB]\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n/Title ");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("\n/Creator ");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("\n/Producer ");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("\n/CreationDate (D:%d%02d%02d%02d%02d%02d)",
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("Z)\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("-%02d'%02d')\n", (-offset)/60/60 , ((-offset)/60) % 60);
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("+%02d'%02d')\n", offset/60/60 , (offset/60) % 60);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("%d 0 R\n", pages[i]);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("]\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    //xprintf("/Group <</S /Transparency /I true /K false>>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/Count %d\n", pages.size());
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/ProcSet [/PDF /Text /ImageB /ImageC]\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("%d\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("<< /Length %d >>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("<<\n/Type /Annot\n/Subtype /Link\n/Rect [");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.left(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.top(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.right(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s", qt_real_to_string(rr.bottom(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("]\n/Border [0 0 0]\n/A <<\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("/Type /Action\n/S /URI\n/URI (%s)\n", url_esc);
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf(">>\n>>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("endobj\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("<<\n/Type /Annot\n/Subtype /Link\n/Rect [");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.left(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.top(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s ", qt_real_to_string(rr.right(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s", qt_real_to_string(rr.bottom(),buf));
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("]\n/Border [0 0 0]\n/Dest ");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("\n>>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("endobj\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("[%d /XYZ %s \n",
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("%s 0]\n",
./qt/src/gui/painting/qprintengine_pdf.cpp:    d->xprintf("endobj\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/GState%d %d 0 R\n", currentPage->graphicStates.at(i), currentPage->graphicStates.at(i));
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/Pattern <<\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Pat%d %d 0 R\n", currentPage->patterns.at(i), currentPage->patterns.at(i));
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/Font <<\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/F%d %d 0 R\n", currentPage->fonts[i], currentPage->fonts[i]);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("/XObject <<\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Im%d %d 0 R\n", currentPage->images.at(i), currentPage->images.at(i));
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("[ ");
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("%d 0 R ", currentPage->annotations.at(i));
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("]\nendobj\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("<<\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("/Filter /FlateDecode\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf(">>\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("stream\n");
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("endstream\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("%d\nendobj\n",len);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("xref\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("%010d 00000 n \n", xrefPositions[i]);
./qt/src/gui/painting/qprintengine_pdf.cpp:    xprintf("trailer\n"
./qt/src/gui/painting/qprintengine_pdf.cpp:        xprintf("%d 0 obj\n",object);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawHelper\n");
./qt/src/gui/painting/qpainter.cpp://     printf("VxF=%d, WxF=%d\n", state->VxF, state->WxF);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::save()\n");
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::restore()\n");
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::begin(), device=%p, type=%d\n", pd, pd->devType());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::end()\n");
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setBrushOrigin(), (%.2f,%.2f)\n", p.x(), p.y());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setClipping(), enable=%s, was=%s\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setClipRegion(), size=%d, [%d,%d,%d,%d]\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setMatrixEnabled(), enable=%d\n", enable);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::scale(), sx=%f, sy=%f\n", sx, sy);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::shear(), sh=%f, sv=%f\n", sh, sv);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::rotate(), angle=%f\n", a);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::translate(), dx=%f, dy=%f\n", dx, dy);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setClipPath(), size=%d, op=%d, bounds=[%.2f,%.2f,%.2f,%.2f]\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPath(), size=%d, [%.2f,%.2f,%.2f,%.2f]\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawRects(), count=%d\n", rectCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawRects(), count=%d\n", rectCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPoints(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPoints(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setBackgroundMode(), mode=%d\n", mode);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setPen(), color=%04x\n", color.rgb());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setPen(), color=%04x, (brushStyle=%d) style=%d, cap=%d, join=%d\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setBrush(), color=%04x, style=%d\n", brush.color().rgb(), brush.style());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setBackground(), color=%04x, style=%d\n", bg.color().rgb(), bg.style());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setFont(), family=%s, pointSize=%d\n", font.family().toLatin1().constData(), font.pointSize());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawRoundedRect(), [%.2f,%.2f,%.2f,%.2f]\n", rect.x(), rect.y(), rect.width(), rect.height());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawEllipse(), [%.2f,%.2f,%.2f,%.2f]\n", r.x(), r.y(), r.width(), r.height());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawEllipse(), [%d,%d,%d,%d]\n", r.x(), r.y(), r.width(), r.height());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawArc(), [%.2f,%.2f,%.2f,%.2f], angle=%d, sweep=%d\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPie(), [%.2f,%.2f,%.2f,%.2f], angle=%d, sweep=%d\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawChord(), [%.2f,%.2f,%.2f,%.2f], angle=%d, sweep=%d\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawLineSegments(), count=%d\n", a.size()/2);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawLines(), line count=%d\n", lineCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawLine(), line count=%d\n", lineCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPolyline(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPolyline(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPolygon(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPolygon(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawConvexPolygon(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawConvexPolygon(), count=%d\n", pointCount);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPixmap(), p=[%.2f,%.2f], pix=[%d,%d]\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawPixmap(), target=[%.2f,%.2f,%.2f,%.2f], pix=[%d,%d], source=[%.2f,%.2f,%.2f,%.2f]\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawText(), pos=[%.2f,%.2f], str='%s'\n", p.x(), p.y(), str.toLatin1().constData());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawText(), r=[%d,%d,%d,%d], flags=%d, str='%s'\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawText(), r=[%.2f,%.2f,%.2f,%.2f], flags=%d, str='%s'\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawText(), r=[%.2f,%.2f,%.2f,%.2f], str='%s'\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawTextItem(), pos=[%.f,%.f], str='%s'\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::drawTiledPixmap(), target=[%.2f,%.2f,%.2f,%.2f], pix=[%d,%d], offset=[%.2f,%.2f]\n",
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setRenderHint: hint=%x, %s\n", hint, on ? "on" : "off");
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setWindow(), [%d,%d,%d,%d]\n", r.x(), r.y(), r.width(), r.height());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setViewport(), [%d,%d,%d,%d]\n", r.x(), r.y(), r.width(), r.height());
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::setViewTransformEnabled(), enable=%d\n", enable);
./qt/src/gui/painting/qpainter.cpp:        printf("QPainter::resetMatrix()\n");
./qt/src/gui/painting/qpaintbuffer.cpp:    printf("Float buffer:");
./qt/src/gui/painting/qpaintbuffer.cpp:            printf("\n%4d-%4d: ", i, i+9);
./qt/src/gui/painting/qpaintbuffer.cpp:        printf("%4.2f  ", d->floats[i]);
./qt/src/gui/painting/qpaintbuffer.cpp:    printf("\n");
./qt/src/gui/painting/qpaintbuffer.cpp:    printf("Int Buffer:");
./qt/src/gui/painting/qpaintbuffer.cpp:            printf("\n%4d-%4d: ", i, i+10);
./qt/src/gui/painting/qpaintbuffer.cpp:        printf("%5d", d->ints[i]);
./qt/src/gui/painting/qpaintbuffer.cpp:    printf("\n");
./qt/src/gui/painting/qcolor.cpp:    s.sprintf("#%02x%02x%02x", red(), green(), blue());
./qt/src/gui/painting/qprintengine_win.cpp://         printf("QPrintDialogWinPrivate::createDevNames()\n"
./qt/src/gui/painting/qprintengine_win.cpp://         printf("QPrintDialogWinPrivate::createDevNames(): %s, %s, %s\n",
./qt/src/gui/itemviews/qitemdelegate.cpp:// hacky but faster version of "QString::sprintf("%d-%d", i, enabled)"
./qt/src/gui/kernel/qapplication_x11.cpp:    qsnprintf(buffer, 256, "%d", err->request_code);
./qt/src/gui/kernel/qapplication_x11.cpp:            qsnprintf(buffer, 256, "%s.%d", extensionName, err->minor_code);
./qt/src/gui/kernel/qapplication_x11.cpp:            qsnprintf(minor_str, 256, "Unknown request");
./qt/src/gui/kernel/qapplication_x11.cpp:        s.sprintf("/proc/%d/cmdline", getppid());
./qt/src/gui/kernel/qapplication_x11.cpp:        printf("\7");
./qt/src/gui/kernel/qapplication_qws.cpp:        printf("%40s: %+8d = %8d\n",m,used-init-prev,used-init);
./qt/src/gui/text/qfontengine_win.cpp://     printf(" -> for glyph %4x\n", glyph);
./qt/src/gui/text/qfontengine_qws.cpp:        for (int i=0; i<indent; i++) printf(" ");
./qt/src/gui/text/qfontengine_qws.cpp:        printf("%d..%d",min,max);
./qt/src/gui/text/qfontengine_qws.cpp:        printf(" (total %d)",totalChars());
./qt/src/gui/text/qfontengine_qws.cpp:        printf("\n");
./qt/src/gui/text/qtextengine.cpp:        //printf("level = %d\n", r->level);
./qt/src/gui/text/qtextengine.cpp://             fprintf(stderr, "  logclusters:");
./qt/src/gui/text/qtextengine.cpp://                 fprintf(stderr, " %d", logClusters[k]);
./qt/src/gui/text/qtextengine.cpp://             fprintf(stderr, "\n");
./qt/src/gui/text/qfontengine_x11.cpp:    printf("a) w=%.2f, h=%.2f, xoff=%.2f, yoff=%.2f, x=%.2f, y=%.2f\n",
./qt/src/gui/text/qfontdatabase_x11.cpp:    snprintf(buffer, 8, "%f", req.pixelSize);
./qt/src/corelib/global/qglobal.cpp:        fprintf(stderr, msg);
./qt/src/corelib/global/qglobal.cpp:        fprintf(stderr, "%s\n", buf);
./qt/src/corelib/global/qglobal.cpp:        qvsnprintf(emergency_buf, 255, msg, ap);
./qt/src/corelib/global/qglobal.cpp:            buf = QString().vsprintf(msg, ap).toLocal8Bit();
./qt/src/corelib/global/qglobal.cpp:    it works in similar way to the C printf() function. The format
./qt/src/corelib/global/qglobal.cpp:    similar to the C printf() function. The format should be a Latin-1
./qt/src/corelib/global/qglobal.cpp:    similar to the C printf() function. The format should be a Latin-1
./qt/src/corelib/global/qglobal.cpp:        buf.vsprintf(msg, ap);
./qt/src/corelib/global/qglobal.cpp:        buf.vsprintf(msg, ap);
./qt/src/corelib/global/qglobal.cpp:    similar to the C printf() function.
./qt/src/corelib/global/qlibraryinfo.cpp:    printf("This is the QtCore library version " QT_VERSION_STR "\n"
./qt/src/corelib/tools/qbytearray.cpp:    printf("static const quint16 crc_tbl[16] = {\n");
./qt/src/corelib/tools/qbytearray.cpp:        printf("    0x%04x, 0x%04x, 0x%04x, 0x%04x,\n", crc_tbl[i], crc_tbl[i+1], crc_tbl[i+2], crc_tbl[i+3]);
./qt/src/corelib/tools/qbytearray.cpp:    printf("};\n");
./qt/src/corelib/tools/qlocale_tools.cpp:#define Bug(x) {fprintf(stderr, "%s\n", x); exit(1);}
./qt/src/corelib/tools/qstring.cpp:    provided by printf() in the standard C++ library. It doesn't
./qt/src/corelib/tools/qstring.cpp:    \c{long long}). If you need those, use the standard snprintf()
./qt/src/corelib/tools/qstring.cpp:    \warning We do not recommend using QString::sprintf() in new Qt
./qt/src/corelib/tools/qstring.cpp:QString &QString::sprintf(const char *cformat, ...)
./qt/src/corelib/tools/qstring.cpp:    QString &s = vsprintf(cformat, ap);
./qt/src/corelib/tools/qstring.cpp:    Equivalent method to sprintf(), but takes a va_list \a ap
./qt/src/corelib/tools/qstring.cpp:    instead a list of variable arguments. See the sprintf()
./qt/src/corelib/tools/qstring.cpp:    \sa sprintf()
./qt/src/corelib/tools/qstring.cpp:QString &QString::vsprintf(const char* cformat, va_list ap)
./qt/src/corelib/tools/qstring.cpp:  One advantage of using arg() over sprintf() is that the order of the
./qt/src/corelib/tools/qsimd.cpp:    printf("Processor features: ");
./qt/src/corelib/tools/qsimd.cpp:            printf("%s", features_string + features_indices[i]);
./qt/src/corelib/tools/qsharedpointer.cpp:    fprintf(stderr, "Backtrace of the first creation (most recent frame first):\n");
./qt/src/corelib/tools/qsharedpointer.cpp:            fprintf(output, "#%-2d %s\n", i, stack_symbols[i]);
./qt/src/corelib/tools/qsharedpointer.cpp:            fprintf(output, "#%-2d %p\n", i, stack[i]);
./qt/src/corelib/tools/qlocale.cpp:        // these are not supported by sprintf for octal and hex
./qt/src/corelib/tools/qlocale.cpp:    // LeftAdjusted overrides this flag ZeroPadded. sprintf only padds
./qt/src/corelib/tools/qlocale.cpp:    // LeftAdjusted overrides this flag ZeroPadded. sprintf only padds
./qt/src/corelib/tools/qhash.cpp:            line.sprintf("%d:", i);
./qt/src/corelib/tools/qhash.cpp:                line += QString().sprintf(" -> [%p]", n);
./qt/src/corelib/tools/qvsnprintf.cpp:    A portable \c vsnprintf() function. Will call \c ::vsnprintf(), \c
./qt/src/corelib/tools/qvsnprintf.cpp:    ::_vsnprintf(), or \c ::vsnprintf_s depending on the system, or
./qt/src/corelib/tools/qvsnprintf.cpp:    \a fmt is the \c printf() format string. The result is put into
./qt/src/corelib/tools/qvsnprintf.cpp:    \warning Since vsnprintf() shows different behavior on certain
./qt/src/corelib/tools/qvsnprintf.cpp:    Ideally, you should never call this function but use QString::sprintf()
./qt/src/corelib/tools/qvsnprintf.cpp:    \sa qsnprintf(), QString::sprintf()
./qt/src/corelib/tools/qvsnprintf.cpp:int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap)
./qt/src/corelib/tools/qvsnprintf.cpp:    buf.vsprintf(fmt, ap);
./qt/src/corelib/tools/qvsnprintf.cpp:int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap)
./qt/src/corelib/tools/qvsnprintf.cpp:    A portable snprintf() function, calls qvsnprintf.
./qt/src/corelib/tools/qvsnprintf.cpp:    \a fmt is the \c printf() format string. The result is put into
./qt/src/corelib/tools/qvsnprintf.cpp:    Use QString::sprintf() to format a string instead.
./qt/src/corelib/tools/qvsnprintf.cpp:    \sa qvsnprintf(), QString::sprintf()
./qt/src/corelib/tools/qvsnprintf.cpp:int qsnprintf(char *str, size_t n, const char *fmt, ...)
./qt/src/corelib/tools/qvsnprintf.cpp:    int ret = qvsnprintf(str, n, fmt, ap);
./qt/src/corelib/tools/qmap.cpp:    str.sprintf("    %.8x", adjust_ptr(reinterpret_cast<Node *>(this)));
./qt/src/corelib/tools/qmap.cpp:        str.sprintf("%d: [%.8x] -", i, adjust_ptr(reinterpret_cast<Node *>(forward[i])));
./qt/src/corelib/tools/qmap.cpp:        str.sprintf("       %.8x", adjust_ptr(node));
./qt/src/corelib/tools/qmap.cpp:            str.sprintf("-> [%.8x] -", adjust_ptr(node->forward[i]));
./qt/src/corelib/xml/qxmlstream.cpp:    printf "$sizes[$j], ";
./qt/src/corelib/thread/qthread_win.cpp://             printf("(qt) - qt_adopted_thread_watcher_function... called\n");
./qt/src/corelib/thread/qthreadstorage.cpp:    fprintf(stderr, "QThreadStorage: ");
./qt/src/corelib/thread/qthreadstorage.cpp:    vfprintf(stderr, fmt, va);
./qt/src/corelib/thread/qthreadstorage.cpp:    fprintf(stderr, "\n");
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "QThreadData %p created\n", this);
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "QThreadData %p destroyed\n", this);
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "new QAdoptedThread = %p\n", this);
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "~QAdoptedThread = %p\n", this);
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "QThreadData %p created for thread %p\n", d->data, this);
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "QThreadData %p taken from private data for thread %p\n", d->data, this);
./qt/src/corelib/thread/qthread.cpp:    // fprintf(stderr, "QThreadData %p taken from private data for thread %p\n", d->data, this);
./qt/src/corelib/io/qurl.cpp:// implemented in qvsnprintf.cpp
./qt/src/corelib/io/qurl.cpp:Q_CORE_EXPORT int qsnprintf(char *str, size_t n, const char *fmt, ...);
./qt/src/corelib/io/qtextstream.cpp:    \value ScientificNotation Scientific notation (\c{printf()}'s \c %e flag).
./qt/src/corelib/io/qtextstream.cpp:    \value FixedNotation Fixed-point notation (\c{printf()}'s \c %f flag).
./qt/src/corelib/io/qtextstream.cpp:    \value SmartNotation Scientific or fixed-point notation, depending on which makes most sense (\c{printf()}'s \c %g flag).
./qt/src/corelib/io/qtextstream.cpp:            tmp.sprintf("\\x%x", (unsigned int)(unsigned char)c);
./qt/src/corelib/io/qprocess.cpp:            qsnprintf(buf, sizeof(buf), "\\%3o", c);
./qt/src/corelib/io/qprocess_unix.cpp:            tmp.sprintf("\\%o", c);
./qt/src/corelib/io/qprocess_unix.cpp:    fprintf(stderr, "*** SIGCHLD\n");
./qt/src/corelib/io/qprocess_unix.cpp:                fprintf(stderr, "QProcessPrivate::execChild() searching / starting %s\n", argv[0]);
./qt/src/corelib/io/qprocess_unix.cpp:            fprintf(stderr, "QProcessPrivate::execChild() starting %s\n", argv[0]);
./qt/src/corelib/io/qprocess_unix.cpp:    fprintf(stderr, "QProcessPrivate::execChild() failed (%s), notifying parent process\n", qPrintable(error));
./qt/src/corelib/io/qiodevice.cpp:            printf("\n%15d:", startOffset);
./qt/src/corelib/io/qiodevice.cpp:                printf(" %02x", int(uchar(tmp[j])));
./qt/src/corelib/io/qiodevice.cpp:                printf("   ");
./qt/src/corelib/io/qiodevice.cpp:                printf("%c", isprint(int(uchar(tmp[j]))) ? tmp[j] : '.');
./qt/src/corelib/io/qiodevice.cpp:    printf("\n\n");
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::QIODevice(\"%s\") %s\n", this, metaObject()->className(),
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::QIODevice(%p \"%s\")\n", this, parent, metaObject()->className());
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::~QIODevice()\n", this);
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::setOpenMode(0x%x)\n", this, int(openMode));
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::open(0x%x)\n", this, quint32(mode));
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::close()\n", this);
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::pos() == %d\n", this, int(d->pos));
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::seek(%d), before: d->pos = %d, d->buffer.size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p \tafter: d->pos == %d, d->buffer.size() == %d\n", this, int(d->pos),
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::atEnd() returns %s, d->openMode == %d, d->pos == %d\n", this, (d->openMode == NotOpen || d->pos == size()) ? "true" : "false",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::reset()\n", this);
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::read(%p, %d), d->pos = %d, d->buffer.size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:            printf("%p \tread 0x%hhx (%c) returning 1 (shortcut)\n", this,
./qt/src/corelib/io/qiodevice.cpp:            printf("%p \treading %d bytes from buffer into position %d\n", this, lastReadChunkSize,
./qt/src/corelib/io/qiodevice.cpp:                    printf("%p \treading %d from device into buffer\n", this, int(readFromDevice));
./qt/src/corelib/io/qiodevice.cpp:                        printf("%p \treading %d bytes from buffer at position %d\n", this,
./qt/src/corelib/io/qiodevice.cpp:            printf("%p \treading %d bytes from device (total %d)\n", this, int(readFromDevice), int(readSoFar));
./qt/src/corelib/io/qiodevice.cpp:    printf("%p \treturning %d, d->pos == %d, d->buffer.size() == %d\n", this,
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::read(%d), d->pos = %d, d->buffer.size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::readAll(), d->pos = %d, d->buffer.size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::readLine(%p, %d), d->pos = %d, d->buffer.size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:        printf("%p \tread from buffer: %d bytes, last character read: %hhx\n", this,
./qt/src/corelib/io/qiodevice.cpp:    printf("%p \tread from readLineData: %d bytes, readSoFar = %d bytes\n", this,
./qt/src/corelib/io/qiodevice.cpp:    printf("%p \treturning %d, d->pos = %d, d->buffer.size() = %d, size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::readLine(%d), d->pos = %d, d->buffer.size() = %d\n",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::readLineData(%p, %d), d->pos = %d, d->buffer.size() = %d, returns %d\n",
./qt/src/corelib/io/qiodevice.cpp:    printf("%p QIODevice::ungetChar(0x%hhx '%c')\n", this, c, isprint(c) ? c : '?');
./qt/src/corelib/codecs/qiconvcodec.cpp:        fprintf(stderr, "QIconvCodec::convertToUnicode: internal error, UTF-16 codec not found\n");
./qt/src/corelib/codecs/qiconvcodec.cpp:                fprintf(stderr,
./qt/src/corelib/codecs/qiconvcodec.cpp:            fprintf(stderr,
./qt/src/corelib/kernel/qcrashhandler.cpp:#include "qbytearray.h" // for qvsnprintf()
./qt/src/corelib/kernel/qcrashhandler.cpp:    fprintf(outb, "Stack [%d]:\n", stack_size);
./qt/src/corelib/kernel/qcrashhandler.cpp:            fprintf(outb, "#%d  %p [%s]\n", i, stack[i], stack_symbols[i]);
./qt/src/corelib/kernel/qcrashhandler.cpp:     * Please note that vsnprintf() is not ASync safe (ie. cannot safely
./qt/src/corelib/kernel/qcrashhandler.cpp:    qvsnprintf(cmd, 512, format, args);
./qt/src/corelib/kernel/qcrashhandler.cpp:            fprintf(stderr, "Crash (backtrace written to %s)!!!\n", crash_loc);
./qt/src/corelib/kernel/qcrashhandler.cpp:        fprintf(outb, "Crash!!!\n");
./qt/src/corelib/kernel/qeventdispatcher_unix.cpp:    qsnprintf(name, sizeof(name), "/pipe/qt_%08x", int(taskIdCurrent));
./qt/src/corelib/kernel/qeventdispatcher_unix.cpp:    qsnprintf(name, sizeof(name), "/pipe/qt_%08x", int(taskIdCurrent));
./qt/src/corelib/kernel/qfunctions_wince.cpp:    sprintf( name, "tmp%i", i++ );
./qt/src/corelib/kernel/qtcore_eval.cpp:            fprintf(stderr, "%s\n", will_shutdown_1min);
./qt/src/corelib/kernel/qtcore_eval.cpp:            fprintf(stderr, "%s\n", will_shutdown_now);
./qt/src/corelib/kernel/qtcore_eval.cpp:        fprintf(stderr, "%s\n", boilerplate_expired);
./qt/src/corelib/kernel/qtcore_eval.cpp:        fprintf(stderr, "%s\n", qPrintable(qt_eval_string()));
./qt/src/corelib/kernel/qcoreapplication_win.cpp:    rawParameters.sprintf("hwnd(0x%p) ", (void *)msg.hwnd);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("%s Hwnd (0x%p)", activation.toLatin1().data(), (void *)msg.hwnd);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("Hwnd gaining capture (0x%p)", (void *)lParam);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("x,y(%4d,%4d) w,h(%4d,%4d) className(%s) windowName(%s) parent(0x%p) style(%s) exStyle(%s)",
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("Destroy hwnd (0x%p)", (void *)msg.hwnd);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("Command(%s : 0x%p)", imnCommand.toLatin1().data(), (void *)lParam);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("Input context(%s) Show flags(%s)", (fSet? "Active" : "Inactive"), showFlgs.toLatin1().data());
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("Hwnd gaining keyboard focus (0x%p)", (void *)wParam);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("Virual-key(0x%x) Scancode(%d) Rep(%d) Contextcode(%d), Prev state(%d), Trans state(%d)",
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("TLW(0x%p) HittestCode(0x%x) MouseMsg(%s)", (void *)wParam, LOWORD(lParam), mouseMsg.toLatin1().data());
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("x,y(%4d,%4d) Virtual Keys(%s)", GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam), vrtKeys.toLatin1().data());
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("x,y(%4d,%4d)", LOWORD(lParam), HIWORD(lParam));
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("hdc(0x%p)", (void *)wParam);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("HitTestCode(0x%x) MouseMsg(%s)", LOWORD(lParam), mouseMsg.toLatin1().data());
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("Lost Focus (0x%p)", (void *)wParam);
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("Set Text (%s)", QString((QChar*)lParam, (int)wcslen(reinterpret_cast<const wchar_t *>(lParam))).toLatin1().data()); //Unicode string
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("w,h(%4d,%4d) showmode(%s)", LOWORD(lParam), HIWORD(lParam), showMode.toLatin1().data());
./qt/src/corelib/kernel/qcoreapplication_win.cpp:                parameters.sprintf("x,y(%4d,%4d) w,h(%4d,%4d) flags(%s) hwndAfter(%s)", winPos->x, winPos->y, winPos->cx, winPos->cy, flags.toLatin1().data(), hwndAfter.toLatin1().data());
./qt/src/corelib/kernel/qcoreapplication_win.cpp:            parameters.sprintf("wParam(0x%p) lParam(0x%p)", (void *)wParam, (void *)lParam);
./qt/src/plugins/codecs/kr/qeuckrcodec.cpp:  printf("qt_Ksc5601ToUnicode : code = %x, unicode = %x\n",
./qt/src/plugins/codecs/kr/qeuckrcodec.cpp:  printf("qt_UnicodeToKsc5601 : unicode = %x, %x\n",
./qt/config.tests/mac/xcodeversion.cpp://    printf ("string: %s\n", ptr);
./qt/config.tests/symbian/simple/main.cpp:    printf("test\n");
./qt/qmake/generators/mac/pbuilder_pbx.cpp:        fprintf(stderr, "Project file not generated because all requirements not met:\n\t%s\n",
./qt/qmake/generators/mac/pbuilder_pbx.cpp:                        fprintf(stderr, "Cannot find directory: %s\n", dir.toLatin1().constData());
./qt/qmake/generators/mac/pbuilder_pbx.cpp:            fprintf(stderr, "No group available for %s!\n", k.toLatin1().constData());
./qt/qmake/generators/symbian/initprojectdeploy_symbian.cpp:        fprintf(stderr, "cannot deploy \"%s\" because of plugin stub file creation failed\n", info.fileName().toLatin1().constData());
./qt/qmake/generators/symbian/symmake.cpp:            fprintf(stderr, "Unable to resolve epocRoot '%s' to real dir on current drive, defaulting to '/' for mmp paths\n", qPrintable(qt_epocRoot()));
./qt/qmake/generators/symbian/symmake.cpp:        fprintf(stderr, "Project files not generated because all requirements are not met:\n\t%s\n",
./qt/qmake/generators/symbian/symmake.cpp:        fprintf(stderr, "Warning: Restricted statements detected in MMP_RULES:\n"
./qt/qmake/generators/symbian/symmake.cpp:        fprintf(stderr, "Error: Unexpected targettype (%d) in SymbianMakefileGenerator::writeMmpFileTargetPart\n", targetType);
./qt/qmake/generators/symbian/symmake.cpp:            fprintf(stderr, "Invalid VERSION string: %s\n", qPrintable(applicationVersion));
./qt/qmake/generators/symbian/symmake.cpp:                fprintf(stderr, "Warning: Empty BLD_INF_RULES key encountered\n");
./qt/qmake/generators/symbian/symmake_sbsv2.cpp:                    fprintf(stderr, "Error: Could not copy '%s' -> '%s'\n",
./qt/qmake/generators/symbian/symmake_sbsv2.cpp:            fprintf(stderr, "Warning: Variable QT_GCCE_VERSION ('%s') is in incorrect "
./qt/qmake/generators/symbian/symmake_sbsv2.cpp:            fprintf(stderr, "Warning: Variable QT_RVCT_VERSION ('%s') is in incorrect "
./qt/qmake/generators/symbian/symmake_sbsv2.cpp:            fprintf(stderr, "Warning: No HW compilers detected. "
./qt/qmake/generators/symbian/symmake_sbsv2.cpp:        fprintf(stderr, "Warning: No valid release platforms in SYMBIAN_PLATFORMS (%s)\n"
./qt/qmake/generators/symbian/symmake_sbsv2.cpp:            fprintf(stderr, "Warning: Only first icon specified in ICON variable is used: '%s'.", qPrintable(icon));
./qt/qmake/generators/symbian/symbiancommon.cpp:        fprintf(stderr, "Error: Invalid UID \"%s\".\n", uid3.toUtf8().constData());
./qt/qmake/generators/symbian/symbiancommon.cpp:        fprintf(stderr, "Warning: Custom language, header, or vendor definitions are not "
./qt/qmake/generators/symbian/symbiancommon.cpp:        fprintf(stderr, "Warning: If language is defined with DEPLOYMENT pkg_prerules, also the SIS header must be defined\n");
./qt/qmake/generators/symbian/symbiancommon.cpp:            fprintf(stderr, "Warning: Invalid DEPLOYMENT.pkg_build_version (%s), must be a number between 0 - 99\n", qPrintable(pkgBuildVersion));
./qt/qmake/generators/symbian/symbiancommon.cpp:                fprintf(stderr, "Warning: Empty RSS_RULES_BASE key encountered\n");
./qt/qmake/generators/symbian/symbiancommon.cpp:                    fprintf(stderr, "Warning: There must be exactly one value in '%s%s'\n",
./qt/qmake/generators/symbian/symbiancommon.cpp:                    fprintf(stderr, "Warning: There must be exactly one value in '%s%s'\n",
./qt/qmake/generators/symbian/symbiancommon.cpp:                fprintf(stderr, "Warning: Unsupported key:'%s%s'\n",
./qt/qmake/generators/symbian/symbiancommon.cpp:        fprintf(stderr, "Warning: Both or neither of '%s%s' and '%s%s' keys must exist.\n",
./qt/qmake/generators/symbian/symbiancommon.cpp:            fprintf(stderr, "Warning: '%s%s' must be integer in decimal format.\n",
./qt/qmake/generators/symbian/symbiancommon.cpp:                fprintf(stderr, "ERROR: Encountered error \"%s\" when parsing ts file (%s).\n",
./qt/qmake/generators/symbian/symbiancommon.cpp:            fprintf(stderr, "Warning: Could not open ts file (%s).\n", qPrintable(tsFilename));
./qt/qmake/generators/symbian/symbiancommon.cpp:        fprintf(stderr, "Warning: ts file does not exist: (%s), unable to parse it.\n",
./qt/qmake/generators/unix/unixmake.cpp:                        lib.sprintf("lib%s-tmp%d.a",
./qt/qmake/generators/makefile.cpp:                fprintf(stderr, "Error processing meta file: %s\n", real_meta_file.toLatin1().constData());
./qt/qmake/generators/metamakefile.cpp:                        fprintf(stderr, "Failure to open file: %s\n",
./qt/qmake/generators/metamakefile.cpp:                printf(" ");
./qt/qmake/generators/metamakefile.cpp:                printf("Reading %s [%s]\n", subdir.absoluteFilePath().toLatin1().constData(), sub->output_dir.toLatin1().constData());
./qt/qmake/generators/metamakefile.cpp:                printf("Reading %s\n", subdir.absoluteFilePath().toLatin1().constData());
./qt/qmake/generators/metamakefile.cpp:                fprintf(stderr, "Project file(%s) not recursed because all requirements not met:\n\t%s\n",
./qt/qmake/generators/metamakefile.cpp:                printf(" ");
./qt/qmake/generators/metamakefile.cpp:            printf("Writing %s\n", QDir::cleanPath(Option::output_dir+"/"+
./qt/qmake/generators/metamakefile.cpp:        fprintf(stderr, "MAKEFILE_GENERATOR variable not set as a result of parsing : %s. Possibly qmake was not able to find files included using \"include(..)\" - enable qmake debugging to investigate more.\n",
./qt/qmake/generators/metamakefile.cpp:        fprintf(stderr, "Unknown generator specified: %s\n", gen.toLatin1().constData());
./qt/qmake/generators/metamakefile.cpp:        fprintf(stderr, "Unknown generator specified: %s\n", gen.toLatin1().constData());
./qt/qmake/generators/win32/msvc_vcproj.cpp:        fprintf(stderr, "Project file not generated because all requirements not met:\n\t%s\n",
./qt/qmake/generators/win32/msvc_vcproj.cpp:        fprintf(stderr,
./qt/qmake/generators/win32/msvc_vcproj.cpp:        fprintf(stderr, "Project file not generated because all requirements not met:\n\t%s\n",
./qt/qmake/generators/win32/msvc_vcproj.cpp:                        fprintf(stderr, "Cannot find directory: %s\n", dir.toLatin1().constData());
./qt/qmake/generators/win32/msvc_vcproj.cpp:                        fprintf(stderr, "Project file(%s) not added to Solution because all requirements not met:\n\t%s\n",
./qt/qmake/generators/win32/winmakefile.cpp:		::fprintf(stderr, "Cannot open for writing: %s", rcFile.fileName().toLatin1().constData());
./qt/qmake/generators/win32/winmakefile.cpp:            fprintf(stderr, "Both rc and res file specified.\n");
./qt/qmake/generators/win32/winmakefile.cpp:            fprintf(stderr, "Please specify one of them, not both.");
./qt/qmake/generators/win32/msvc_objectmodel.cpp:    printf("case 0x%07x: // %s\n    break;\n", elfHash(str), str);
./qt/qmake/property.cpp:                        fprintf(stdout, "%s/", s.toLatin1().constData());
./qt/qmake/property.cpp:                    fprintf(stdout, "%s:%s\n", (*it2).toLatin1().constData(), ret.toLatin1().constData());
./qt/qmake/property.cpp:                fprintf(stdout, "%s:%s\n", prop.toLatin1().constData(), value(prop).toLatin1().constData());
./qt/qmake/property.cpp:                fprintf(stdout, "%s:", (*it).toLatin1().constData());
./qt/qmake/property.cpp:                fprintf(stdout, "**Unknown**\n");
./qt/qmake/property.cpp:                fprintf(stdout, "%s\n", value((*it)).toLatin1().constData());
./qt/qmake/project.cpp:        qmake_expand_functions->insert("sprintf", E_SPRINTF);
./qt/qmake/project.cpp:    fprintf(stderr, "%s:%d: %s\n", parser.file.toLatin1().constData(), parser.line_no,
./qt/qmake/project.cpp:                    fprintf(stderr, "Braces mismatch %s:%d\n", parser.file.toLatin1().constData(), parser.line_no);
./qt/qmake/project.cpp:                            fprintf(stderr, "%s:%d: No tests can come after a function definition!\n",
./qt/qmake/project.cpp:                                fprintf(stderr, "%s:%d: for(iterate, list) requires two arguments.\n",
./qt/qmake/project.cpp:                                fprintf(stderr, "%s:%d unexpected nested for()\n",
./qt/qmake/project.cpp:                                    fprintf(stderr, "%s:%d: for(iterate, list) requires two arguments.\n",
./qt/qmake/project.cpp:                                fprintf(stderr,
./qt/qmake/project.cpp:                                fprintf(stderr, "%s:%d: %s(function_name) requires one argument.\n",
./qt/qmake/project.cpp:                                fprintf(stderr, "%s:%d: Function[%s] multiply defined.\n",
./qt/qmake/project.cpp:                    fprintf(stderr, "Braces mismatch %s:%d\n", parser.file.toLatin1().constData(), parser.line_no);
./qt/qmake/project.cpp:            fprintf(stdout, "#file %s:%d\n", parser.file.toLatin1().constData(), parser.line_no);
./qt/qmake/project.cpp:        fprintf(stdout, "%s %s %s\n", var.toLatin1().constData(), op.toLatin1().constData(), vals.toLatin1().constData());
./qt/qmake/project.cpp:                    fprintf(stderr, "QMAKESPEC has not been set, so configuration cannot be deduced.\n");
./qt/qmake/project.cpp:                        fprintf(stderr, "Could not find mkspecs for your QMAKESPEC(%s) after trying:\n\t%s\n",
./qt/qmake/project.cpp:                fprintf(stderr, "Failure to read QMAKESPEC conf file %s.\n", spec.toLatin1().constData());
./qt/qmake/project.cpp:                fprintf(stderr, "Argument failed to parse: %s\n", (*it).toLatin1().constData());
./qt/qmake/project.cpp:                fprintf(stderr, "Argument failed to parse: %s\n", (*it).toLatin1().constData());
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: Using OS scope before setting MAKEFILE_GENERATOR\n",
./qt/qmake/project.cpp:                        fprintf(stderr, "Unknown target platform specified: %s\n",
./qt/qmake/project.cpp:        fprintf(stderr, "#switching file %s(%s) - %s:%d\n", (flags & IncludeFlagFeature) ? "load" : "include",
./qt/qmake/project.cpp:            fprintf(stderr, "Cannot find directory: %s\n", file.left(di).toLatin1().constData());
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: member(var, start, end) requires three arguments.\n",
./qt/qmake/project.cpp:                        fprintf(stderr, "%s:%d: member() argument 2 (start) '%s' invalid.\n",
./qt/qmake/project.cpp:                        fprintf(stderr, "%s:%d: member() argument 3 (end) '%s' invalid.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: %s(var) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: cat(file) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: fromfile(file, variable) requires two arguments.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: eval(variable) requires one argument.\n",
./qt/qmake/project.cpp:                    fprintf(stderr, "%s:%d: unexpected source to eval.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:        tmp.sprintf(".QMAKE_INTERNAL_TMP_VAR_%d", x++);
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: sprintf(format, ...) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: join(var, glue, before, after) requires four"
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d split(var, sep) requires one or two arguments\n",
./qt/qmake/project.cpp:                fprintf(stderr, "%s:%d section(var, sep, begin, end) requires three argument\n",
./qt/qmake/project.cpp:                fprintf(stderr, "%s:%d %s(var) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d find(var, str) requires two arguments\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d system(execut) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d unique(var) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d files(pattern) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d prompt(question) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d prompt(question) cannot be used when '-o -' is used.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "Project %s: %s ", func.toUpper().toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d replace(var, before, after) requires three arguments\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: size(var) requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: generate_uid(var) requires one argument.\n",
./qt/qmake/project.cpp:        fprintf(stderr, "%s:%d: Unknown replace function: %s\n",
./qt/qmake/project.cpp:                fprintf(stderr, "%s:%d Unexpected return value from test %s [%s].\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: %s(variable, value) requires two arguments.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: if(condition) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: %s(variable, value) requires two arguments.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: exists(file) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: export(variable) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: clear(variable) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: unset(variable) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: eval(project) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: CONFIG(config) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: system(exec) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d unexpected return()\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d unexpected break()\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d unexpected next()\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: defined(function) requires one argument.\n",
./qt/qmake/project.cpp:               fprintf(stderr, "%s:%d: defined(function, type): unexpected type [%s].\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: contains(var, val) requires at lesat 2 arguments.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: infile(file, var, val) requires at least 2 arguments.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: count(var, count) requires two arguments.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: unexpected modifier to count(%s)\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: isEmpty(var) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: %s requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:                printf("Project LOAD(): Feature %s cannot be found.\n", file.toLatin1().constData());
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: debug(level, message) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: %s(message) requires one argument.\n", parser.file.toLatin1().constData(),
./qt/qmake/project.cpp:        fprintf(stderr, "Project %s: %s\n", func.toUpper().toLatin1().constData(), msg.toLatin1().constData());
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: option() requires one argument.\n",
./qt/qmake/project.cpp:            fprintf(stderr, "%s:%d: unrecognized option() argument '%s'.\n",
./qt/qmake/project.cpp:        fprintf(stderr, "%s:%d: Unknown test function: %s\n", parser.file.toLatin1().constData(), parser.line_no,
./qt/qmake/meta.cpp:    fprintf(stderr, "Must implement reading in pkg-config files (%s)!!!\n", f.toLatin1().constData());
./qt/qmake/main.cpp:                fprintf(stderr, "Cannot find file: %s.\n", fn.toLatin1().constData());
./qt/qmake/main.cpp:                    fprintf(stderr, "Cannot find directory: %s\n", fn.left(di).toLatin1().constData());
./qt/qmake/main.cpp:                fprintf(stderr, "Error processing project file: %s\n",
./qt/qmake/main.cpp:                fprintf(stderr, "Unable to generate project file.\n");
./qt/qmake/main.cpp:                fprintf(stderr, "Unable to generate makefile for: %s\n", (*pfile).toLatin1().constData());
./qt/qmake/option.cpp:    fprintf(stdout, "Usage: %s [mode] [options] [files]\n"
./qt/qmake/option.cpp:                fprintf(stderr, "-macx is deprecated.\n");
./qt/qmake/option.cpp:                fprintf(stderr, "-unix is deprecated.\n");
./qt/qmake/option.cpp:                fprintf(stderr, "-win32 is deprecated.\n");
./qt/qmake/option.cpp:                fprintf(stdout,
./qt/qmake/option.cpp:                fprintf(stdout, "QMake is Open Source software from Nokia Corporation and/or its subsidiary(-ies).\n");
./qt/qmake/option.cpp:                        fprintf(stderr, "-E is deprecated. Use -d instead.\n");
./qt/qmake/option.cpp:                        fprintf(stderr, "***Unknown option -%s\n", opt.toLatin1().constData());
./qt/qmake/option.cpp:                        fprintf(stderr, "***Unknown option -%s\n", opt.toLatin1().constData());
./qt/qmake/option.cpp:    sprintf_s(ret, 15, "%d.%02d%c", QMAKE_VERSION_MAJOR, QMAKE_VERSION_MINOR, 'a' + QMAKE_VERSION_PATCH);
./qt/qmake/option.cpp:    sprintf(ret, "%d.%02d%c", QMAKE_VERSION_MAJOR, QMAKE_VERSION_MINOR, 'a' + QMAKE_VERSION_PATCH);
./qt/qmake/option.cpp:    fprintf(stderr, "DEBUG %d: ", level);
./qt/qmake/option.cpp:        vfprintf(stderr, fmt, ap);
./qt/qmake/option.cpp:    fprintf(stderr, "\n");
./qt/qmake/option.cpp:    fprintf(stderr, "WARNING: ");
./qt/qmake/option.cpp:        vfprintf(stderr, fmt, ap);
./qt/qmake/option.cpp:    fprintf(stderr, "\n");
./webpage.cpp:    /*printf("%s\n",(const char *)m_proxyAuth.toAscii().constData());
./webpage.cpp:    printf("%s\n",(const char *)m_proxy.toAscii().constData());
./webpage.cpp:    printf("%s\n",(const char *)m_proxyType.toAscii().constData());
./webpage.cpp:    printf("%s\n",(const char *)proxyUser.toAscii().constData());
./webpage.cpp:    printf("%s\n",(const char *)proxyPass.toAscii().constData());
./webpage.cpp:    printf("%s\n",(const char *)proxyHost.toAscii().constData());
./webpage.cpp:    printf("%d\n",proxyPort);
./webpage.cpp: //    printf("Set proxy!\n");
./webpage.cpp:        printf("\n*******\n%s\n********\n",code.toAscii().constData());
./webpage.cpp:        printf("\n*******\n%s\n********\n",function.toAscii().constData());
./utils.cpp:        fprintf(stdout, "%s [DEBUG] %s\n", qPrintable(now.toString(Qt::ISODate)), msg);
./utils.cpp:        fprintf(stderr, "%s [WARNING] %s\n", qPrintable(now.toString(Qt::ISODate)), msg);
./utils.cpp:        fprintf(stderr, "%s [CRITICAL] %s\n", qPrintable(now.toString(Qt::ISODate)), msg);
./utils.cpp:        fprintf(stderr, "%s [FATAL] %s\n", qPrintable(now.toString(Qt::ISODate)), msg);
